{
  "hash": "8e45a4b9734e283b26cc2365b41652a5",
  "result": {
    "engine": "knitr",
    "markdown": "---\nlayout: page\ntitle: \"AH-ANTQ103: Workshop 2\"\nsubtitle: \"Spring 2024\"\ndate: \"Last updated: 2025-08-12\"\n---\n\n\n\n\n## Introduction\n\nIn this workshop, we will expand on some of the basic functions, use tidyverse more and introduce some archaeology specific functions. It will follow the flow of a more typical data analysis workflow. We will work with data about lithics from the Jerimalai rockshelter in East-Timor. This workshop has been inspired by the 'tidyverse for archaeologists' workshop by Professor Ben Marwick.\n\nSome of the code will be evaluated here, but some will not so please copy and paste the code into your own script and run it there.\n\nLoad the `tidyverse` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Data\n\nThis data is coming from an URL, and it is an excel file. We unfortunately cannot use tidyverse to read excel files, so we will use the `rio` package.\n\nInstall the `rio` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"rio\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rio)\n```\n:::\n\n\nLoad the data using `import`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- import(\"https://bit.ly/j_data_xlsx\", setclass = \"tbl_df\")\n```\n:::\n\n\nLet's have a look at the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(data)\nsummary(data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9752\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 48\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Site\"       \"Square\"     \"Spit\"       \"Group\"      \"Artno\"     \n [6] \"Material\"   \"Colour\"     \"Weight\"     \"Length\"     \"Artclas\"   \n[11] \"Cortex\"     \"Cortype\"    \"Initiat\"    \"Breaks\"     \"Noseg\"     \n[16] \"Platwid\"    \"Plat\"       \"Focal\"      \"Overhang\"   \"NoDS\"      \n[21] \"NoPS\"       \"Rtch\"       \"Plat_2\"     \"Focal_2\"    \"Overhang_2\"\n[26] \"NoDS_2\"     \"NoPS_2\"     \"Rtch_2\"     \"RetOri\"     \"Retype\"    \n[31] \"Retloc\"     \"Retlen\"     \"Retdep\"     \"Portion\"    \"Heat\"      \n[36] \"EdgeDam\"    \"Weathering\" \"Corerot\"    \"RetScNo\"    \"Term\"      \n[41] \"Janus\"      \"Recycled\"   \"Redirect\"   \"Width\"      \"Thick\"     \n[46] \"Platthic\"   \"area\"       \"elongation\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 48\n  Site  Square  Spit Group Artno Material Colour   Weight Length Artclas Cortex\n  <chr> <chr>  <dbl> <dbl> <dbl> <chr>    <chr>     <dbl>  <dbl> <chr>    <dbl>\n1 J     B          1     1     1 Chert    Brown      1.83  22.0  Flake        0\n2 J     B          1     1     2 Chert    Yellow     0.61  14.6  RetF         0\n3 J     B          1     1     3 Chert    Dk Grey    3.81  29.6  Core         0\n4 J     B          1     1     4 Chert    Grey       0.13   5.83 RetFrag      0\n5 J     B          1     1     5 Chert    Grey       0.05   7.07 Flake        0\n6 J     B          1     1     6 Chert    Lt Brown   0.58  11.1  Core        NA\n# ℹ 37 more variables: Cortype <chr>, Initiat <chr>, Breaks <chr>, Noseg <dbl>,\n#   Platwid <dbl>, Plat <chr>, Focal <lgl>, Overhang <chr>, NoDS <dbl>,\n#   NoPS <dbl>, Rtch <chr>, Plat_2 <chr>, Focal_2 <lgl>, Overhang_2 <chr>,\n#   NoDS_2 <dbl>, NoPS_2 <dbl>, Rtch_2 <chr>, RetOri <chr>, Retype <chr>,\n#   Retloc <chr>, Retlen <dbl>, Retdep <dbl>, Portion <chr>, Heat <dbl>,\n#   EdgeDam <dbl>, Weathering <dbl>, Corerot <dbl>, RetScNo <dbl>, Term <chr>,\n#   Janus <lgl>, Recycled <lgl>, Redirect <lgl>, Width <dbl>, Thick <dbl>, …\n```\n\n\n:::\n:::\n\n\nWe will select the `Square`, `Spit` and `Weight` columns. Note that we can select multiple columns in one go using the comma.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n  select(Square, Spit, Weight)\n```\n:::\n\n\n## Plotting\n\nWe now want to get into plotting our data. For this we are only interested in the `Square`, `Spit`, `Material`, `Weight` and `Thick` columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotting_data <- data %>% \n  select(Square, Spit, Material, Weight, Thick)\nplotting_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9,752 × 5\n   Square  Spit Material Weight Thick\n   <chr>  <dbl> <chr>     <dbl> <dbl>\n 1 B          1 Chert      1.83  3.34\n 2 B          1 Chert      0.61  2.74\n 3 B          1 Chert      3.81  7.25\n 4 B          1 Chert      0.13  2.05\n 5 B          1 Chert      0.05  1.13\n 6 B          1 Chert      0.58  4.79\n 7 B          1 Chert      0.03  1.16\n 8 B          1 Chert      0.02  1.09\n 9 B          1 Chert      0.21  3.91\n10 B          1 Chert      0.25  3.13\n# ℹ 9,742 more rows\n```\n\n\n:::\n:::\n\n\nWe can now create a histogram of the `Weight` column. This will show how many artefacts have a certain weight. We can do this using the `ggplot()` function. This function takes a tibble, and creates a plot. ggplot works with layers. We can add these layers with a + sign. The base command is `ggplot()`. This creates a white canvas, and you can add information that is passed to the layers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(plotting_data)\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/ggplot-1.png){width=672}\n:::\n:::\n\n\nAs we want to make a histogram, we only need to specify the x axis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(plotting_data, aes(x = Weight))\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/ggplot_2-1.png){width=672}\n:::\n:::\n\n\nNow we need to add a layer that displays the data. These layers are known as geoms. There are many different geoms, but we want to create a histogram, so we will use the `geom_histogram()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(plotting_data, aes(x = Weight)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/ggplot_3-1.png){width=672}\n:::\n:::\n\n\nThere are some weights that are very large, but most are close to zero. If we change the x axis scale to a logaritmic scale, we can see the distribution better. We do this by adding the `scale_x_log10()` layer.\n\nA logarithm is a mathematical function that increases slowly at first, and then faster and faster. This is useful for data that has a large range, as it compresses the data and makes it easier to see the distribution. This specific logarithm is the base 10 logarithm, which means that 10 is raised to the power of the number on the x axis. For example, 10\\^2 = 100, so the number 2 would be at the position 100 on the x axis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogs_tibble <- tibble(x = c(10^0, 10^1, 10^2, 10^3, 10^4), y = c(\"10^0\", \"10^1\", \"10^2\", \"10^3\", \"10^4\"), z = log10(x))\nlogs_tibble\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n      x y         z\n  <dbl> <chr> <dbl>\n1     1 10^0      0\n2    10 10^1      1\n3   100 10^2      2\n4  1000 10^3      3\n5 10000 10^4      4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(plotting_data, aes(x = Weight)) +\n  geom_histogram() +\n  scale_x_log10()\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/ggplot_4-1.png){width=672}\n:::\n:::\n\n\nWe can also change the theme of the plot. There are many themes available, but we will use the `theme_bw()` theme.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(plotting_data, aes(x = Weight)) +\n  geom_histogram() +\n  scale_x_log10() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/ggplot_5-1.png){width=672}\n:::\n:::\n\n\nWe now only want to keep rows that have the \"A\" value for the `Square` column. We can do this using the `filter()` function. Keep in mind that \"A\" is a string, so we need to use quotation marks and two equal signs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotting_data %>% \n  filter(Square == \"A\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,436 × 5\n   Square  Spit Material Weight Thick\n   <chr>  <dbl> <chr>     <dbl> <dbl>\n 1 A          1 Chert      1.74  4.37\n 2 A          1 Chert      1.64  4.09\n 3 A          1 Obsidian   0.12  1.41\n 4 A          1 Chert      2.12  5.96\n 5 A          1 Chert      2.25  7.62\n 6 A          1 Chert      4.88  8.97\n 7 A          1 Chert      8.95 16.0 \n 8 A          1 Chert      3.02  8.15\n 9 A          1 Chert      2.71  6.44\n10 A          1 Chert      1.31  5.84\n# ℹ 4,426 more rows\n```\n\n\n:::\n:::\n\n\nNow, from these rows we only want light objects, lets say with a `Weight` less than 10. We can do this by adding another filter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotting_data %>% \n  filter(Square == \"A\") %>% \n  filter(Weight < 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,416 × 5\n   Square  Spit Material Weight Thick\n   <chr>  <dbl> <chr>     <dbl> <dbl>\n 1 A          1 Chert      1.74  4.37\n 2 A          1 Chert      1.64  4.09\n 3 A          1 Obsidian   0.12  1.41\n 4 A          1 Chert      2.12  5.96\n 5 A          1 Chert      2.25  7.62\n 6 A          1 Chert      4.88  8.97\n 7 A          1 Chert      8.95 16.0 \n 8 A          1 Chert      3.02  8.15\n 9 A          1 Chert      2.71  6.44\n10 A          1 Chert      1.31  5.84\n# ℹ 4,406 more rows\n```\n\n\n:::\n:::\n\n\nAnd a thickness between 0.2 and 20. We can either do this by adding two filters, or by using the `between()` function. Note that there is an important difference between \\> and \\>=, and \\< and \\<=.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotting_data %>% \n  filter(Square == \"A\") %>% \n  filter(Weight < 10) %>% \n  filter(Thick > 0.2) %>% \n  filter(Thick < 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,390 × 5\n   Square  Spit Material Weight Thick\n   <chr>  <dbl> <chr>     <dbl> <dbl>\n 1 A          1 Chert      1.74  4.37\n 2 A          1 Chert      1.64  4.09\n 3 A          1 Obsidian   0.12  1.41\n 4 A          1 Chert      2.12  5.96\n 5 A          1 Chert      2.25  7.62\n 6 A          1 Chert      4.88  8.97\n 7 A          1 Chert      8.95 16.0 \n 8 A          1 Chert      3.02  8.15\n 9 A          1 Chert      2.71  6.44\n10 A          1 Chert      1.31  5.84\n# ℹ 4,380 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplotting_data %>% \n  filter(Square == \"A\") %>% \n  filter(Weight < 10) %>% \n  filter(between(Thick, 0.2, 20))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,392 × 5\n   Square  Spit Material Weight Thick\n   <chr>  <dbl> <chr>     <dbl> <dbl>\n 1 A          1 Chert      1.74  4.37\n 2 A          1 Chert      1.64  4.09\n 3 A          1 Obsidian   0.12  1.41\n 4 A          1 Chert      2.12  5.96\n 5 A          1 Chert      2.25  7.62\n 6 A          1 Chert      4.88  8.97\n 7 A          1 Chert      8.95 16.0 \n 8 A          1 Chert      3.02  8.15\n 9 A          1 Chert      2.71  6.44\n10 A          1 Chert      1.31  5.84\n# ℹ 4,382 more rows\n```\n\n\n:::\n:::\n\n\nAlternatively, you can combine them in one filter function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotting_data %>%\n  filter(Square == \"A\" & Weight < 10 & between(Thick, 0.2, 20))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,392 × 5\n   Square  Spit Material Weight Thick\n   <chr>  <dbl> <chr>     <dbl> <dbl>\n 1 A          1 Chert      1.74  4.37\n 2 A          1 Chert      1.64  4.09\n 3 A          1 Obsidian   0.12  1.41\n 4 A          1 Chert      2.12  5.96\n 5 A          1 Chert      2.25  7.62\n 6 A          1 Chert      4.88  8.97\n 7 A          1 Chert      8.95 16.0 \n 8 A          1 Chert      3.02  8.15\n 9 A          1 Chert      2.71  6.44\n10 A          1 Chert      1.31  5.84\n# ℹ 4,382 more rows\n```\n\n\n:::\n:::\n\n\nWe also don't want rows that have `NA` values in the `Material` column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplotting_data %>%\n  filter(Square == \"A\") %>% \n  filter(Weight < 10) %>% \n  filter(between(Thick, 0.2, 20)) %>% \n  drop_na(Material)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,392 × 5\n   Square  Spit Material Weight Thick\n   <chr>  <dbl> <chr>     <dbl> <dbl>\n 1 A          1 Chert      1.74  4.37\n 2 A          1 Chert      1.64  4.09\n 3 A          1 Obsidian   0.12  1.41\n 4 A          1 Chert      2.12  5.96\n 5 A          1 Chert      2.25  7.62\n 6 A          1 Chert      4.88  8.97\n 7 A          1 Chert      8.95 16.0 \n 8 A          1 Chert      3.02  8.15\n 9 A          1 Chert      2.71  6.44\n10 A          1 Chert      1.31  5.84\n# ℹ 4,382 more rows\n```\n\n\n:::\n:::\n\n\nWe now want to make a scatterplot of the `Weight` and `Thick` columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n new_plotting_data <- plotting_data %>%\n  filter(Square == \"A\") %>% \n  filter(Weight < 10) %>% \n  filter(between(Thick, 0.2, 20)) %>% \n  drop_na(Material)\n```\n:::\n\n\nCreate the empty plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(new_plotting_data, aes(x = Weight, y = Thick))\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/ggplot_6-1.png){width=672}\n:::\n:::\n\n\nAdd the points layer.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(new_plotting_data, aes(x = Weight, y = Thick)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/ggplot_7-1.png){width=672}\n:::\n:::\n\n\nIt may again be useful to change the x axis to a logaritmic scale.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(new_plotting_data, aes(x = Weight, y = Thick)) +\n  geom_point() +\n  scale_x_log10()\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/ggplot_8-1.png){width=672}\n:::\n:::\n\n\nWe can also do the same for the y axis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(new_plotting_data, aes(x = Weight, y = Thick)) +\n  geom_point() +\n  scale_x_log10() +\n  scale_y_log10()\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/ggplot_9-1.png){width=672}\n:::\n:::\n\n\nWe now set the theme, as well as changing the axis labels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(new_plotting_data, aes(x = Weight, y = Thick)) +\n  geom_point() +\n  scale_x_log10() +\n  scale_y_log10() +\n  theme_bw() +\n  labs(x = \"Weight (g)\", y = \"Thickness (mm)\")\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/ggplot_10-1.png){width=672}\n:::\n:::\n\n\nWe can also add a colour to the points based on the material the object is made of. We do this by adding the `colour = Material` argument to the `aes()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n ggplot(new_plotting_data, aes(x = Weight, y = Thick, colour = Material)) +\n  geom_point() +\n  scale_x_log10() +\n  scale_y_log10() +\n  theme_bw() +\n  labs(x = \"Weight (g)\", y = \"Thickness (mm)\")\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/ggplot_11-1.png){width=672}\n:::\n:::\n\n\nWe can change the position of the legend using the `theme()` function. We need to specify the x and y coordinates of the legend. This uses a coordinate system between 0 and 1, so 0.5 is in the middle.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(new_plotting_data, aes(x = Weight, y = Thick, colour = Material)) +\n  geom_point() +\n  scale_x_log10() +\n  scale_y_log10() +\n  theme_bw() +\n  labs(x = \"Weight (g)\", y = \"Thickness (mm)\") +\n  theme(legend.position = c(0.85, 0.3))\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/ggplot_12-1.png){width=672}\n:::\n:::\n\n\nOur goal now is to make a boxplot of the `plat_area` column, grouped by the `Material` column. Lets get the data first. We need to create the `plat_area` column first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplat_area_data <- data %>% \n  mutate(plat_area = Platwid * Platthic)\n```\n:::\n\n\nNow we only keep materials that have more than 5 objects and remove `NA` values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplat_area_data <- plat_area_data %>% \n  group_by(Material) %>% \n  filter(n() > 5) %>% \n  drop_na(Material)\n```\n:::\n\n\nNow create the plot using the `geom_boxplot()` function. We leave the code for a homework assignment.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](workshop2_files/figure-html/boxplot_3-1.png){width=672}\n:::\n:::\n\n\nWe now want to create a plot that shows the number of objects per material. First get the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaterial_data <- plat_area_data %>% \n  group_by(Material) %>% \n  count()\n```\n:::\n\n\nNow create the plot using the `geom_col()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = material_data) +  \n  aes(x = Material,  \n      y = n) +  \n  geom_col() +  \n  scale_y_log10() +  \n  labs(x = \"Raw Material\",  \n       y =  \"Number of Objects\") +  \n  theme_classic(base_size = 14)\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/barplot_2-1.png){width=672}\n:::\n:::\n\n\nWe can change the order of the columns using the `reorder()` function. We need to specify the column we want to reorder, and the column we want to order by. In this case, we want to order the `Material` column by the `n` column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = material_data) +  \n  aes(x = reorder(Material, n),  \n      y = n) +  \n  geom_col() +  \n  scale_y_log10() +  \n  labs(x = \"Raw Material\",  \n       y =  \"Number of Objects\") +  \n  theme_classic(base_size = 14)\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/barplot_3-1.png){width=672}\n:::\n:::\n\n\nIf we wanted to create a top 5 plot, we would first arrange the data by the `n` column, and then only keep the top 5 rows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmaterial_data <- material_data %>% \n  arrange(desc(n)) %>% # Note we arrange the rows in descending order, so the largest value is at the top\n  head(5)\n\nggplot(data = material_data) +\n  aes(x = reorder(Material, n), y = n) +\n  geom_col() +\n  scale_y_log10() +\n  labs(x = \"Raw Material\", y = \"Number of Objects\") +\n  theme_classic(base_size = 14)\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/barplot_5-1.png){width=672}\n:::\n:::\n\n\nNow lets say we want to make a plot of the distributions of length of each object. We can either manually create each plot by filtering for each material, or we can use the `facet_wrap()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = plat_area_data) +  \n  aes(x = Length) +  \n  geom_histogram() +  \n  facet_wrap(~Material) +  \n  labs(x = \"Length (mm)\",  \n       y =  \"Number of Objects\") +  \n  theme_classic(base_size = 14)\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/facet_wrap_1-1.png){width=672}\n:::\n:::\n\n\nDue to the amount of chert items in the data, this is not very useful, but we can set the `y` axis to be free for each plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = plat_area_data) +  \n  aes(x = Length) +  \n  geom_histogram() +  \n  facet_wrap(~Material, scales = \"free_y\") +  \n  labs(x = \"Length (mm)\",  \n       y =  \"Number of Objects\") +  \n  theme_classic(base_size = 14)\n```\n\n::: {.cell-output-display}\n![](workshop2_files/figure-html/facet_wrap_2-1.png){width=672}\n:::\n:::\n\n\n## Homework assignments\n\n### Assignment 1\n\nCreate the plot below. This is the same plot as we made earlier in the workshop.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](workshop2_files/figure-html/assignment_1-1.png){width=672}\n:::\n:::\n\n\n### Assignment 2\n\nCreate the plot below of the most common colours. You will need to perform some data manipulation first.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](workshop2_files/figure-html/assignment_2-1.png){width=672}\n:::\n:::\n\n\n### Assignment 3\n\nWhat is the most common term in the dataset? Create a tibble that contains the term and the number of times it occurs.\n",
    "supporting": [
      "workshop2_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}