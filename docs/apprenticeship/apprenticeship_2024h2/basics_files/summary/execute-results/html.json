{
  "hash": "44c0316a7e78f7314df4cf9ab24b041d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Center Apprenticeship:\\nR basics: Summary statistics\"\nsubtitle: \"June 2024\" \ndate: \"Last updated: 2025-08-09\"\n---\n\n\n\n::: {.cell}\n\n:::\n\n\nTo get a descriptive statistic of a single variable in a tibble, we can use that variable as an argument to a relevant function (using `$` to refer to a variable in a tibble).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(data$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19.68276\n```\n\n\n:::\n\n```{.r .cell-code}\nmedian(data$age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19\n```\n\n\n:::\n\n```{.r .cell-code}\nsd(data$grade)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.281705\n```\n\n\n:::\n:::\n\n\nTo get the frequencies of a categorical variable, we can use the `count()` function, with the `sort = TRUE` argument returning the values in descending frequency. `count()` is a tidy function that works well with pipe workflows and can count the joint frequencies of multiple variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# frequencies of a single variable\ncount(data, reading)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  reading     n\n  <lgl>   <int>\n1 FALSE      76\n2 TRUE       69\n```\n\n\n:::\n\n```{.r .cell-code}\n# joint frequency distribution\ncount(data, reading, listening, notes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 4\n  reading listening notes     n\n  <lgl>   <lgl>     <lgl> <int>\n1 FALSE   FALSE     FALSE    14\n2 FALSE   FALSE     TRUE     23\n3 FALSE   TRUE      FALSE    20\n4 FALSE   TRUE      TRUE     19\n5 TRUE    FALSE     FALSE    19\n6 TRUE    FALSE     TRUE     14\n7 TRUE    TRUE      FALSE    15\n8 TRUE    TRUE      TRUE     21\n```\n\n\n:::\n:::\n\n\nTo get the correlation coefficient between two variables, we can use the `cor()` function in the same way we used other descriptives such as `mean()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(data$age, data$grade)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.1856025\n```\n\n\n:::\n:::\n\n\nThe easiest way to get summary statistics of all variables in a tibble is with the `summary()` function: this function shows the distribution of numeric variables, the frequencies of categorical variables, and the number of missing values for each variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       id            age            sex             scholarship    \n Min.   :5001   Min.   :18.00   Length:145         Min.   : 25.00  \n 1st Qu.:5037   1st Qu.:18.00   Class :character   1st Qu.: 50.00  \n Median :5073   Median :19.00   Mode  :character   Median : 50.00  \n Mean   :5073   Mean   :19.68                      Mean   : 64.76  \n 3rd Qu.:5109   3rd Qu.:21.00                      3rd Qu.: 75.00  \n Max.   :5145   Max.   :26.00                      Max.   :100.00  \n                                                   NA's   :1       \n additional_work  reading          notes         listening      \n Mode :logical   Mode :logical   Mode :logical   Mode :logical  \n FALSE:96        FALSE:76        FALSE:68        FALSE:70       \n TRUE :49        TRUE :69        TRUE :77        TRUE :75       \n                                                                \n                                                                \n                                                                \n                                                                \n     grade      \n Min.   :0.000  \n 1st Qu.:1.500  \n Median :3.000  \n Mean   :2.755  \n 3rd Qu.:4.000  \n Max.   :4.000  \n                \n```\n\n\n:::\n:::\n\n\nThe `summary()` function is useful for viewing the data in the Console, but doesn't export to outside of R nicely. There are a few packages available for generating simple summary statistics tables that contain information about the central tendencies and dispersion of the data, such as `vtable` or `stargazer` (with many more available). These packages all have different default settings, output types, and customization options.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vtable)\nlibrary(stargazer)\n\n# vtable\n\ndata |> \n  # by default creates HTML table; out = \"csv\" returns a dataframe\n  # can change which descriptives to keep\n  # can report group-level descriptives\n  sumtable(out = \"csv\", group = \"reading\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Variable  N Mean  SD   N Mean  SD\n1          reading No          Yes         \n2               id 76 5080  44  69 5066  39\n3              age 76   20 2.3  69   20 1.7\n4              sex 76           69         \n5       ... Female 32  42%      26  38%    \n6         ... Male 44  58%      43  62%    \n7      scholarship 75   65  18  69   64  21\n8  additional_work 76           69         \n9           ... No 47  62%      49  71%    \n10         ... Yes 29  38%      20  29%    \n11           notes 76           69         \n12          ... No 34  45%      34  49%    \n13         ... Yes 42  55%      35  51%    \n14       listening 76           69         \n15          ... No 37  49%      33  48%    \n16         ... Yes 39  51%      36  52%    \n17           grade 76  2.5 1.3  69    3 1.2\n```\n\n\n:::\n\n```{.r .cell-code}\n# stargazer\n\ndata |> \n  # input needs to be a data.frame, not tibble\n  as.data.frame() |> \n  # default output is LaTeX table\n  # can be exported with the out argument or a following write() function\n  # can change which descriptives to keep or omit\n  # limited to numeric variables\n  stargazer(type = \"text\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n==================================================\nStatistic        N    Mean    St. Dev.  Min   Max \n--------------------------------------------------\nid              145 5,073.000  42.002  5,001 5,145\nage             145  19.683    1.992    18    26  \nscholarship     144  64.757    19.480   25    100 \nadditional_work 145   0.338    0.475     0     1  \nreading         145   0.476    0.501     0     1  \nnotes           145   0.531    0.501     0     1  \nlistening       145   0.517    0.501     0     1  \ngrade           145   2.755    1.282   0.000 4.000\n--------------------------------------------------\n```\n\n\n:::\n:::\n\n\nAlternatively, we can define our own summary statistics with the `dplyr` functions `group_by()` and `summarize()`, which also easily allows the calculation of more complex descriptive statistics, including grouped statistics based on categorical variables. The `across()` helper function in the `summarize()` function can be used to apply the same calculation to multiple variables at once: it requires the first argument as the list of variables (potentially with the help of selector functions) and the function we'd like to apply.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tibble of mean and sd for a single variable\ndata |> \n  summarize(mean_grade = mean(grade),\n            sd_grade = sd(grade))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  mean_grade sd_grade\n       <dbl>    <dbl>\n1       2.76     1.28\n```\n\n\n:::\n\n```{.r .cell-code}\n# mean and sd of age and grade variables, grouped by reading\ndata |> \n  group_by(reading) |> \n  # .names allows overriding default option to reuse original column names\n  summarize(across(c(age, grade), mean, .names = \"mean_{.col}\"),\n            across(c(age, grade), sd, .names = \"sd_{.col}\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  reading mean_age mean_grade sd_age sd_grade\n  <lgl>      <dbl>      <dbl>  <dbl>    <dbl>\n1 FALSE       19.7       2.54   2.27     1.34\n2 TRUE        19.7       2.99   1.66     1.18\n```\n\n\n:::\n\n```{.r .cell-code}\n# mean of all numeric variables, grouped by reading\ndata |> \n  group_by(reading) |> \n  # where() is a helper function evaluating the contents of variables\n  # specify full function call with ~ at the start and .x replacing the variable name\n  summarize(across(where(is.numeric), ~mean(.x, na.rm = TRUE)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  reading    id   age scholarship grade\n  <lgl>   <dbl> <dbl>       <dbl> <dbl>\n1 FALSE   5080.  19.7        65    2.54\n2 TRUE    5066.  19.7        64.5  2.99\n```\n\n\n:::\n\n```{.r .cell-code}\n# mean of all variables with names containing the letter a\ndata |> \n  summarize(across(contains(\"a\"), ~mean(.x, na.rm = TRUE)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 5\n    age scholarship additional_work reading grade\n  <dbl>       <dbl>           <dbl>   <dbl> <dbl>\n1  19.7        64.8           0.338   0.476  2.76\n```\n\n\n:::\n\n```{.r .cell-code}\n# sample size of each group and correlation between age and grade per group\ndata |> \n  group_by(reading, listening) |> \n  summarize(age_grade_correlation = cor(age, grade),\n            n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n# Groups:   reading [2]\n  reading listening age_grade_correlation     n\n  <lgl>   <lgl>                     <dbl> <int>\n1 FALSE   FALSE                    0.267     37\n2 FALSE   TRUE                     0.334     39\n3 TRUE    FALSE                    0.0720    33\n4 TRUE    TRUE                    -0.0777    36\n```\n\n\n:::\n:::\n\n\nThe list of helper functions that can be used instead of listing which variables to include/exclude is in the help file accessible with `?dplyr_tidy_select`.\n\nTo export a descriptive statistics table, we can use the relevant `write...()` function shown in the data importing section (e.g. `write_csv()` for tibbles, general `write()` for HTML, plain text, LaTeX, other general types). CSV tables already copy nicely into e.g. MS Word. If using LaTeX or RMarkdown, the `knitr` package contains the `kable()` function that directly improves on the design of the table without needing formatting afterwards.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> \n  count(reading, listening) |> \n  write_csv(\"table1.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |> \n  count(reading, listening) |> \n  # knitr:: allows using function from the package without library(knitr)\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|reading |listening |  n|\n|:-------|:---------|--:|\n|FALSE   |FALSE     | 37|\n|FALSE   |TRUE      | 39|\n|TRUE    |FALSE     | 33|\n|TRUE    |TRUE      | 36|\n\n\n:::\n:::\n\n\n# Go to\n\n-   [Introduction to R](../intro)\n-   [Finding and importing data](../import)\n-   [Data cleaning with `dplyr`](../clean)\n-   [Data visualization with `ggplot2`](../ggplot)\n-   [Hypothesis testing / modelling](../tests)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}