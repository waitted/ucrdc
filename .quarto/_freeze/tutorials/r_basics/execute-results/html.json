{
  "hash": "003d5af3c4c47d105430113546657028",
  "result": {
    "engine": "knitr",
    "markdown": "---\nlayout: page\ntitle: \"Getting started with R and RStudio\"\ndate: \"Last updated: 2025-08-17\"\n---\n\n\n\n\n## First steps\n\nThis tutorial assumes that you have already installed R and RStudio. If not, please follow [this installation tutorial](../r_install.qmd).\n\nA good resource to get a basic familiarity with the setup of R and some key definitions is [A (very) short introduction to R](https://github.com/ClaudiaBrauer/A-very-short-introduction-to-R/blob/master/documents/A%20(very)%20short%20introduction%20to%20R.pdf).\n\nPlease watch [this video (4:17)](https://vimeo.com/1011759671/826f89f9aa), then read and follow along with the written tutorial below.\n\n## Creating a project in RStudio\n\nIt is convenient to create an R project for each assignment that you are working on. A project is basically a folder that stores all files related to the assignment.\n\nYou can create a project as follows:\n\n-   Open RStudio and click on \"Project: (None)\" in the top right corner.\n-   Open the dropdown window and click on \"New Project....\"\n-   In the popup window select \"New Directory\", then \"New Project.\"\n-   Choose a sensible name for your project and enter it as the Directory Name. You can either use the default file path or change it by clicking \"Browse...\" next to \"Create project as a subdirectory of:.\"\n-   Finally, click on \"Create project.\"\n\nAfter a project is created, there are two easy ways of accessing it. You can either use the same dropdown window in the top right corner of RStudio that you used to create the project, and click on the name of the project there, or you can find the project folder within your files and click on the file with the .Rproj extension.\n\n## The RStudio environment\n\nWhen you open RStudio, your screen is most divided into 3 or 4 panels (depending on whether you have any open scripts or data viewer tabs). The most important tabs are the Console, the Environment, Files, Plots, Help, Viewer, and the script/data viewer pane.\n\nThe Console runs any code just by pressing Enter. It runs code and displays output. It is good practice to run small functions that don't need to be saved, such as installing packages or searching for help files directly from the Console. When you run a script, your code automatically gets sent to the Console.\n\nThe Environment tab lists all objects currently defined in your R session. You can work with them within R, but they are not saved anywhere outside of R, and therefore disappear when your session is over. If you click on the name of a dataframe in the Environment tab, it opens the full data in the data viewer.\n\nThe Files tab lists the files in your current working directory by default, but allows you to look at the contents of the other folders on your computer as well. It is equivalent to browsing your file explorer.\n\nThe Plots and Viewer tabs display the static and and interactive plots you create, while the Help tab lets you browse help files.\n\n## Working with scripts\n\nScripts are the basis of reproducible workflows: you save all your code into a script (basically a text file), and you can use that file to rerun your analysis and get the same result every time. It also makes your code easier to edit and gives you a clear overview.\n\nYou can open a new script by File -\\> New File -\\> R Script or by the keyboard shortcut Control/Command + Shift + N. You can run parts of you script by selecting the relevant lines and clicking \"Run\" or using the shortcut Control/Command + Enter. Control/Command + Shift + Enter runs your whole script. Make sure to save your script regularly.\n\n## Installing packages\n\nMost of the time when you work with R, you'll need to use functions or data from packages next to the base R functions that are automatically loaded when you open R.\n\nOne such package that you should almost always load when working with R is `tidyverse`, which is a collection of packages that allow clean workflows of data import, cleaning and manipulation in R. The `ggplot2` package that you can use to create figures is one of these included packages.\n\nYou need to install each package only once, but you need to load them every time you open and use R. It is good practice to load the package on the top of each script. This is how you would install and load `tidyverse` (and any other package).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\") # install the package\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # load the package\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}