{
  "hash": "6d3e712a218233d3cf8d7f8219317450",
  "result": {
    "engine": "knitr",
    "markdown": "---\nlayout: page\ntitle: \"Data visualization: patterns over time\"\ndate: \"Last updated: 2025-08-17\"\n---\n\n\n\n\n**This tutorial is not ready yet. Please come back later.**\n\n# Introduction\n\nBefore you proceed, make sure you're familiar with the logic of `ggplot`, as explained in our [introduction to `ggplot` tutorial](../r_ggplot_intro).\n\nWe'll use the `population` dataset that comes pre-loaded with `tidyverse` to demonstrate how to plot the evolution of a variable over time, so let's load `tidyverse` and have a look at the dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load tidyverse\nlibrary(tidyverse)\n\n# add population to the environment\ndata(population)\n```\n:::\n\n\n## Time series plots\n\nIn a time series plot, the x-axis represents time, and the y-axis represents the variable you want to visualize. To create a time series plot, you can use the `line` geom.\n\nLet's plot the evolution of the `population` variable over time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a time series plot \nggplot(population, aes(x = year, y = population)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](r_ggplot_timeseries_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nThe plot does not make sense, because in every year we have observations for multiple countries, and by default `geom_line()` connects all of the points. Let's filter the data for a single country before plotting. We use the `filter()` function -- if you're not familiar with it, have a look at our corresponding [data wrangling tutorial](../r_intro_subset).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(filter(population, country == \"Netherlands\"), \n       aes(x = year, y = population)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](r_ggplot_timeseries_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nIf you're familiar with the pipe operator `%>%` (see our [tidy workflow tutorial](../r_intro_pipe)), you can use it to make the code more readable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation %>%\n  filter(country == \"Netherlands\") %>%\n  ggplot(aes(x = year, y = population)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](r_ggplot_timeseries_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nYou can compare the evolution of the population by adding multiple lines to the plot and differentiating them by their color. To make it clearer that we have annual data, we can add points to the plot as well, because geoms can be layered.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation %>%\n  # keep only data from the Netherlands and Belgium\n  filter(country %in% c(\"Netherlands\", \"Belgium\")) %>%\n  # specify the aesthetics for all geoms\n  ggplot(aes(x = year, y = population, color = country)) +\n  # add a line for each country\n  geom_line() +\n  # add points for each data point\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](r_ggplot_timeseries_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nWhenever you make a plot, make sure to use clear labels and titles with the `labs()` function to make your visualization easy to understand.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation %>%\n  filter(country == \"Netherlands\") %>%\n  ggplot(aes(x = year, y = population)) +\n  geom_line() +\n  labs(title = \"Population of the Netherlands over time\",\n       x = \"Year\",\n       y = \"Population\")\n```\n\n::: {.cell-output-display}\n![](r_ggplot_timeseries_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nTo learn more about other geoms and customization options, have a look at our [advanced visualization tutorial](../r_adv_ggplot) and [additional resources](../links#Help%20with%20%60ggplot%60).\n\n## Video tutorial TBA\n",
    "supporting": [
      "r_ggplot_timeseries_files\\figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}