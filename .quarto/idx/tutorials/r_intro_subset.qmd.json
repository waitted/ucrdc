{"title":"Data wrangling: filtering rows and selecting columns","markdown":{"yaml":{"layout":"page","title":"Data wrangling: filtering rows and selecting columns","date":"Last updated: `r Sys.Date()`"},"headingText":"Video tutorial","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, error = FALSE)\n```\n\n\nPlease watch [this video (4:45)](https://vimeo.com/1011762380/2e33856231), then read and follow along with the written tutorial below. Compare your own output to what you see printed below to make sure all of your code runs as expected.\n\n## Introduction\n\nOften you don't need all the data in your dataset, but only a subset of it. Maybe you are only interested in a specific subset of observations or you only need a subset of variables. In this tutorial, we show you how to filter rows and select columns from a tibble using `tidyverse` functions and the `diamonds` dataset (which comes pre-loaded with `tidyverse` so you don't need to import it).\n\nLet's load the `tidyverse` package and have a look at the `diamonds` dataset:\n\n```{r}\n# load tidyverse\nlibrary(tidyverse)\n\n# add diamonds to the environment\ndata(diamonds)\n```\n\n## Selecting and renaming variables\n\nOften you don't need all variables included in your downloaded dataset. Then you can select the subset of variables you need (or the subset you would like to remove). The function for doing so is `select()`, and the arguments of the function are your dataset, followed by the names of the variables you would like to keep (or remove, if the variable names are preceded by `-`). The following examples show how to use the function with and without the pipe operator.\n\n```{r}\n# keep only variables price and carat\nselect(diamonds, price, carat)\n\n# remove variables price and carat\nselect(diamonds, -price, -carat)\n```\n\nIf you use the `distinct()` function instead of `select()`, you not only select the listed variables, but keep only unique rows based on these variables. If you use the `distinct()` function without specifying any variables, you remove all duplicates from the dataset, keeping all variables.\n\n```{r}\n# keep only unique rows based on the variables price and carat\ndistinct(diamonds, price, carat)\n```\n\nEspecially if you want to combine datasets from different sources, you may want variable names to be consistent across datasets or convenient to work with. This problem can be easily fixed using the `rename()` function, which has the format `rename(data, \"new_name\" = \"old_name\")`. For example, let's rename the variable `price` to `price_USD` to make it clear that the price is in US dollars:\n\n```{r}\nrename(diamonds, price_USD = price)\n```\n\n## Filtering observations\n\nOften you only need a subset of your data, e.g. observations from a particular location, after a given year, or meeting some other condition. You can filter your dataset using the `filter()` function and logical expressions (e.g. keep if the value for the price of the diamond is greater than \\$10,000, or keep if the value for the variable `cut` is \"Ideal\"). The first function argument is the name of the dataset, and the second argument is the logical expression. When defining your logical expression, you need to use the logical operators: `==` means equal to, `!=` means not equal to, and `>=,<=,>,<` define numeric comparisons.\n\n```{r}\n# keep only diamonds with a price greater than $10,000\nfilter(diamonds, price > 10000)\n\n# keep only diamonds with cut equal to \"Ideal\"\nfilter(diamonds, cut == \"Ideal\")\n```\n\nYou can combine multiple logical expressions using the logical operators `&` (AND) and `|` (OR) in one `filter()` function.\n\n```{r}\n# keep only diamonds with a price greater than $10,000 and cut equal to \"Ideal\"\nfilter(diamonds, price > 10000 & cut == \"Ideal\")\n```\n\nThe `%in%` operator is useful when you want to filter observations based on multiple values of a variable, for example, if cut should be either \"Ideal\" or \"Premium\". Then you concatenate \"Ideal\" and \"Premium\" into a vector and use `%in%` to filter the dataset based on a match with any element of this vector.\n\n```{r}\n# keep only diamonds with cut equal to \"Ideal\" or \"Premium\"\nfilter(diamonds, cut %in% c(\"Ideal\", \"Premium\"))\n```\n\nTo be able to work with this new dataset, you need to save it to a new object. Let's assign the result of the `mutate()` function to a new object called `diamonds_filtered`:\n\n```{r}\n# save the result to a new object\ndiamonds_filtered <- filter(diamonds, cut %in% c(\"Ideal\", \"Premium\"))\n```\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, error = FALSE)\n```\n\n## Video tutorial\n\nPlease watch [this video (4:45)](https://vimeo.com/1011762380/2e33856231), then read and follow along with the written tutorial below. Compare your own output to what you see printed below to make sure all of your code runs as expected.\n\n## Introduction\n\nOften you don't need all the data in your dataset, but only a subset of it. Maybe you are only interested in a specific subset of observations or you only need a subset of variables. In this tutorial, we show you how to filter rows and select columns from a tibble using `tidyverse` functions and the `diamonds` dataset (which comes pre-loaded with `tidyverse` so you don't need to import it).\n\nLet's load the `tidyverse` package and have a look at the `diamonds` dataset:\n\n```{r}\n# load tidyverse\nlibrary(tidyverse)\n\n# add diamonds to the environment\ndata(diamonds)\n```\n\n## Selecting and renaming variables\n\nOften you don't need all variables included in your downloaded dataset. Then you can select the subset of variables you need (or the subset you would like to remove). The function for doing so is `select()`, and the arguments of the function are your dataset, followed by the names of the variables you would like to keep (or remove, if the variable names are preceded by `-`). The following examples show how to use the function with and without the pipe operator.\n\n```{r}\n# keep only variables price and carat\nselect(diamonds, price, carat)\n\n# remove variables price and carat\nselect(diamonds, -price, -carat)\n```\n\nIf you use the `distinct()` function instead of `select()`, you not only select the listed variables, but keep only unique rows based on these variables. If you use the `distinct()` function without specifying any variables, you remove all duplicates from the dataset, keeping all variables.\n\n```{r}\n# keep only unique rows based on the variables price and carat\ndistinct(diamonds, price, carat)\n```\n\nEspecially if you want to combine datasets from different sources, you may want variable names to be consistent across datasets or convenient to work with. This problem can be easily fixed using the `rename()` function, which has the format `rename(data, \"new_name\" = \"old_name\")`. For example, let's rename the variable `price` to `price_USD` to make it clear that the price is in US dollars:\n\n```{r}\nrename(diamonds, price_USD = price)\n```\n\n## Filtering observations\n\nOften you only need a subset of your data, e.g. observations from a particular location, after a given year, or meeting some other condition. You can filter your dataset using the `filter()` function and logical expressions (e.g. keep if the value for the price of the diamond is greater than \\$10,000, or keep if the value for the variable `cut` is \"Ideal\"). The first function argument is the name of the dataset, and the second argument is the logical expression. When defining your logical expression, you need to use the logical operators: `==` means equal to, `!=` means not equal to, and `>=,<=,>,<` define numeric comparisons.\n\n```{r}\n# keep only diamonds with a price greater than $10,000\nfilter(diamonds, price > 10000)\n\n# keep only diamonds with cut equal to \"Ideal\"\nfilter(diamonds, cut == \"Ideal\")\n```\n\nYou can combine multiple logical expressions using the logical operators `&` (AND) and `|` (OR) in one `filter()` function.\n\n```{r}\n# keep only diamonds with a price greater than $10,000 and cut equal to \"Ideal\"\nfilter(diamonds, price > 10000 & cut == \"Ideal\")\n```\n\nThe `%in%` operator is useful when you want to filter observations based on multiple values of a variable, for example, if cut should be either \"Ideal\" or \"Premium\". Then you concatenate \"Ideal\" and \"Premium\" into a vector and use `%in%` to filter the dataset based on a match with any element of this vector.\n\n```{r}\n# keep only diamonds with cut equal to \"Ideal\" or \"Premium\"\nfilter(diamonds, cut %in% c(\"Ideal\", \"Premium\"))\n```\n\nTo be able to work with this new dataset, you need to save it to a new object. Let's assign the result of the `mutate()` function to a new object called `diamonds_filtered`:\n\n```{r}\n# save the result to a new object\ndiamonds_filtered <- filter(diamonds, cut %in% c(\"Ideal\", \"Premium\"))\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"r_intro_subset.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","editor":"visual","theme":"simplex","mainfont":"Cormorant SC","fontsize":"20px","layout":"page","title":"Data wrangling: filtering rows and selecting columns","date":"Last updated: `r Sys.Date()`"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}