{"title":"Working with text","markdown":{"yaml":{"layout":"page","title":"Working with text","date":"Last updated: `r Sys.Date()`"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, error = FALSE)\n```\n\n\nThis tutorial introduces how to treat text as data in R using the `tidytext` package. It introduces methods of importing text, tokenizing text, looking for (partial) matches with simple regular expressions, and analyzing word frequencies.\n\nWe start by installing and loading the `tidytext` package, and loading the `tidyverse` package.\n\n```{r}\n# install.packages(\"tidytext\")\nlibrary(tidytext)\nlibrary(tidyverse)\n```\n\n# Tidy text format\n\nNormally, we think of data as being a table of values, mostly numbers or categories with a limited number of levels. In tidy data, each row corresponds to an observation (e.g. a person completing a survey, or a country about which we know particular characteristics). However, text can also be a kind of data that we can work with in a systematic manner.\n\nWhen thinking of the \"tidy text format\", we need to think of each row as a unit of speech, and each column as a variable that describes the properties of that particular unit of speech. For example a unit of speech can be a word, and a variable could be the word itself, its stem, an indicator of what part of speech the word is (noun, verb, etc.), and so on. For basic text analysis, all we need is the actual text, and therefore we can convert any existing text to a tidy text format in R without needing additional information.\n\nFor example, we can start by defining our text as a single object called `raw_text` that contains the full text we want to analyze (notice the quotation marks around the text to show that it is a character vector).\n\n```{r}\nraw_text <- \"Text analysis in R provides valuable insights by uncovering patterns, trends, and relationships within textual data. It can reveal sentiment, topic distributions, keyword frequencies, and even hidden structures using techniques like natural language processing (NLP) and machine learning. Users can analyze customer reviews, social media posts, or academic papers to identify recurring themes, sentiment shifts, and linguistic trends, ultimately aiding decision-making, market research, and content optimization.\"\n```\n\nIf we want to convert this object to tidy text, we first need to choose what unit we want to work with in our analysis. If our goal is to see which words appear most frequently in the text, we should conduct on our analysis on the word level. In that case, each word in the text is considered as one token, and the text is made up of many tokens arranged in a meaningful order.\n\nIn order to convert a vector like `raw_text` to a tidy format, we first need to convert the vector to a tibble with the `as_tibble()` function. Then we can use the `unnest_tokens()` function from `tidytext` to split the text into tokens so that each token represents one row in our tidy data. When using `unnest_tokens()`, we need to specify the variable name of our original text (in this case called `value`), the name of the new token-level variable we want to create (let's call it `word`), and the token type we want to use (in this case \"words\" but could be e.g. \"sentences\", \"lines\", \"ngrams\" (combinations of n words next to each other), and so on). You can look at all the token types in the help file of `unnest_tokens()` by typing `?unnest_tokens()`.\n\nNotice that the code chunk below uses the pipe operator. You can read more about how the pipe is used [here](../r_intro_pipe).\n\n```{r}\nclean_text <- raw_text |> \n  as_tibble() |> \n  unnest_tokens(output = word, input = value, token = \"words\")\n```\n\nIn the `clean_text` tibble we now have one variable called `word`, which in each row contains one word from the original text, in the order they initially appeared. By default, `unnest_tokens()` also cleans the text by converting all letters to lowercase and removing punctuation.\n\n## Counting word frequencies\n\nThe simplest method of getting a quick overview of a long text is to count the number of times each word appears in the text, and looking at what the most frequent words are. We can get these word frequencies using the `count()` function, specifying which variable we want to count.\n\n```{r}\nclean_text |> \n  count(word)\n```\n\nThe `count()` function has an argument `sort`, which allows us to sort the output from most frequent to least frequent words.\n\n```{r}\nclean_text |> \n  count(word, sort = TRUE)\n```\n\n## Looking for exact and partial word matches\n\nIn many cases we are interested only in analyzing parts of a text that contain our topic of interest. For example, we may want to find which parts of a text talk about \"data\" and in what context. In that case, we can use the `filter()` function to keep only observations that meet a particular criteria. You can see some more explanation and general examples of the `filter()` function in [this tutorial](../r_basics_subset).\n\nWhen we are working with words, exact matches are often enough for our purposes. For example, we can look at how many rows in our `clean_text` tibble have \"data\" as the value of the `word` variable.\n\n```{r}\nclean_text |> \n  filter(word == \"data\")\n```\n\nHowever, this filter tells us nothing about the context in which \"data\" appears. For that, it would be better to split the text into sentences, and find which sentence contains the word \"data\". But if we tokenize the text into sentences, an exact match won't find the sentence we're looking for.\n\n```{r}\n# split the text into sentences\nsentences <- raw_text |> \n  as_tibble() |> \n  unnest_tokens(output = sentence, input = value, token = \"sentences\")\n\n# keep only rows with an exact match to \"data\" (no such rows)\nsentences |> \n  filter(sentence == \"data\")\n```\n\nIf we want to find a partial string match (i.e. a sentence that among other content contains the word \"data\"), we need to use a special function to detect partial matches. This function is called `str_detect()` and takes the arguments of the variable that contains the elements you want to evaluate and the pattern you're looking for. In our case, this variable is `sentence` and the pattern is `data`. `str_detect()` returns a logical vector, i.e. for each element of your variable it tells you whether it matches the pattern (`TRUE`) or not (`FALSE`).\n\n```{r}\n# example of str_detect()\nstr_detect(string = c(\"A\", \"AB\", \"BB\"), pattern = \"A\")\n\n# look for partial match to \"data\" (one sentence)\nsentences |> \n  filter(str_detect(string = sentence, pattern = \"data\"))\n```\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, error = FALSE)\n```\n\n# Introduction\n\nThis tutorial introduces how to treat text as data in R using the `tidytext` package. It introduces methods of importing text, tokenizing text, looking for (partial) matches with simple regular expressions, and analyzing word frequencies.\n\nWe start by installing and loading the `tidytext` package, and loading the `tidyverse` package.\n\n```{r}\n# install.packages(\"tidytext\")\nlibrary(tidytext)\nlibrary(tidyverse)\n```\n\n# Tidy text format\n\nNormally, we think of data as being a table of values, mostly numbers or categories with a limited number of levels. In tidy data, each row corresponds to an observation (e.g. a person completing a survey, or a country about which we know particular characteristics). However, text can also be a kind of data that we can work with in a systematic manner.\n\nWhen thinking of the \"tidy text format\", we need to think of each row as a unit of speech, and each column as a variable that describes the properties of that particular unit of speech. For example a unit of speech can be a word, and a variable could be the word itself, its stem, an indicator of what part of speech the word is (noun, verb, etc.), and so on. For basic text analysis, all we need is the actual text, and therefore we can convert any existing text to a tidy text format in R without needing additional information.\n\nFor example, we can start by defining our text as a single object called `raw_text` that contains the full text we want to analyze (notice the quotation marks around the text to show that it is a character vector).\n\n```{r}\nraw_text <- \"Text analysis in R provides valuable insights by uncovering patterns, trends, and relationships within textual data. It can reveal sentiment, topic distributions, keyword frequencies, and even hidden structures using techniques like natural language processing (NLP) and machine learning. Users can analyze customer reviews, social media posts, or academic papers to identify recurring themes, sentiment shifts, and linguistic trends, ultimately aiding decision-making, market research, and content optimization.\"\n```\n\nIf we want to convert this object to tidy text, we first need to choose what unit we want to work with in our analysis. If our goal is to see which words appear most frequently in the text, we should conduct on our analysis on the word level. In that case, each word in the text is considered as one token, and the text is made up of many tokens arranged in a meaningful order.\n\nIn order to convert a vector like `raw_text` to a tidy format, we first need to convert the vector to a tibble with the `as_tibble()` function. Then we can use the `unnest_tokens()` function from `tidytext` to split the text into tokens so that each token represents one row in our tidy data. When using `unnest_tokens()`, we need to specify the variable name of our original text (in this case called `value`), the name of the new token-level variable we want to create (let's call it `word`), and the token type we want to use (in this case \"words\" but could be e.g. \"sentences\", \"lines\", \"ngrams\" (combinations of n words next to each other), and so on). You can look at all the token types in the help file of `unnest_tokens()` by typing `?unnest_tokens()`.\n\nNotice that the code chunk below uses the pipe operator. You can read more about how the pipe is used [here](../r_intro_pipe).\n\n```{r}\nclean_text <- raw_text |> \n  as_tibble() |> \n  unnest_tokens(output = word, input = value, token = \"words\")\n```\n\nIn the `clean_text` tibble we now have one variable called `word`, which in each row contains one word from the original text, in the order they initially appeared. By default, `unnest_tokens()` also cleans the text by converting all letters to lowercase and removing punctuation.\n\n## Counting word frequencies\n\nThe simplest method of getting a quick overview of a long text is to count the number of times each word appears in the text, and looking at what the most frequent words are. We can get these word frequencies using the `count()` function, specifying which variable we want to count.\n\n```{r}\nclean_text |> \n  count(word)\n```\n\nThe `count()` function has an argument `sort`, which allows us to sort the output from most frequent to least frequent words.\n\n```{r}\nclean_text |> \n  count(word, sort = TRUE)\n```\n\n## Looking for exact and partial word matches\n\nIn many cases we are interested only in analyzing parts of a text that contain our topic of interest. For example, we may want to find which parts of a text talk about \"data\" and in what context. In that case, we can use the `filter()` function to keep only observations that meet a particular criteria. You can see some more explanation and general examples of the `filter()` function in [this tutorial](../r_basics_subset).\n\nWhen we are working with words, exact matches are often enough for our purposes. For example, we can look at how many rows in our `clean_text` tibble have \"data\" as the value of the `word` variable.\n\n```{r}\nclean_text |> \n  filter(word == \"data\")\n```\n\nHowever, this filter tells us nothing about the context in which \"data\" appears. For that, it would be better to split the text into sentences, and find which sentence contains the word \"data\". But if we tokenize the text into sentences, an exact match won't find the sentence we're looking for.\n\n```{r}\n# split the text into sentences\nsentences <- raw_text |> \n  as_tibble() |> \n  unnest_tokens(output = sentence, input = value, token = \"sentences\")\n\n# keep only rows with an exact match to \"data\" (no such rows)\nsentences |> \n  filter(sentence == \"data\")\n```\n\nIf we want to find a partial string match (i.e. a sentence that among other content contains the word \"data\"), we need to use a special function to detect partial matches. This function is called `str_detect()` and takes the arguments of the variable that contains the elements you want to evaluate and the pattern you're looking for. In our case, this variable is `sentence` and the pattern is `data`. `str_detect()` returns a logical vector, i.e. for each element of your variable it tells you whether it matches the pattern (`TRUE`) or not (`FALSE`).\n\n```{r}\n# example of str_detect()\nstr_detect(string = c(\"A\", \"AB\", \"BB\"), pattern = \"A\")\n\n# look for partial match to \"data\" (one sentence)\nsentences |> \n  filter(str_detect(string = sentence, pattern = \"data\"))\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"r_text.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","editor":"visual","theme":"simplex","mainfont":"Cormorant SC","fontsize":"20px","layout":"page","title":"Working with text","date":"Last updated: `r Sys.Date()`"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}