{"title":"AH-ANTQ103: Workshop 3","markdown":{"yaml":{"layout":"page","title":"AH-ANTQ103: Workshop 3","subtitle":"Spring 2025","date":"Last updated: `r Sys.Date()`"},"headingText":"Data","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, error=FALSE)\n```\n\n\nIn this workshop, we will work with Beazley Archive data and focus more on text analysis and fuzzy dates. This workshop is based on work done by Kalle Valkeakari.\n\nAs always, we start by loading `tidyverse`.\n\n```{r packages, message=FALSE, warning=FALSE}\nlibrary(tidyverse)\nlibrary(rio)\n```\n\nWe then load the data. We use a new data set that comes from a link and in the form of a `.csv` file. This file type is a very common file type for data sets and we can load it in using the `import()` function from the `rio` package again.\n\n```{r load data, message=FALSE, warning=FALSE}\n\ndata <- import(\"https://github.com/ucrdatacenter/projects/raw/main/AH-ANTQ103/2024h1/Beazley_Archive.csv\")\n\n```\n\nWe start by looking at the data.\n\n```{r head, results=FALSE}\nView(data)\n```\n\nAfter looking at the data, we have decided that we want the first eight columns and the 10th and 11th column, so we select them using the `select()` function.\n\n```{r select_3, results=FALSE}\ndata_short <- data |> \n  select(URI, Vase_Number, Fabric, Technique, Sub_Technique, Shape_Name, Provenance, Date, Attributed_To, Decoration)\n```\n\nNote that we do not always have to write the names of the columns we want to select, we can also select the names of the columns we would like to exclude and the `-` sign.\n\n```{r select_2, results=FALSE}\ndata_short <- data |> \n  select(-Inscriptions, -Collection_Record, -Publication_Record, -Inscriptions_II, -Measurements, -Volume, -Weight, -Restorations, -Ornament, -Technical_Observations, -Image_Credits, -Pleiades_URI, -Latitude, -Longitude, -LIMC_ID, -LIMC_Web, -British_Museum_Link, -Ure_Museum_Link, -Bryn_Mawr_College_Link, -Nicholson_Collection_Link, -Notes)\n```\n\nAlthough this is obviously more tedious in this example, you will often be confronted with data sets where removing unwanted columns is quicker than listing what you would like to keep.\n\nWe might want to check if there are multiple entries for the same object. Luckily there is a Vase Number column, so we can check if there are multiple entries for the same vase number. We can do this using the `duplicated()` function. We can then use the `filter()` function to filter the data to only include the duplicated rows.\n\n```{r duplicated, results=FALSE}\ndata_short |> \n  filter(duplicated(Vase_Number))\n```\n\nGiven that the tibble that this returns is empty, we can conclude that there are no rows with the same vase number.\n\nWe can also check if there are any rows with missing data. We can do this using the `is.na()` function.\n\n```{r is.na, results=FALSE}\ndata_short |> \n  filter(is.na(Vase_Number))\n```\n\nGiven that the tibble that this returns is empty, we can conclude that there are no rows with a missing vase number.\n\nHowever, since archaeological data is usually very messy, it is typical to find columns with many missing values or entries which are duplicated for no apparent reason. It is therefore very important to check your data sets for such irregularities and to clean it to the best of your abilities using the functions you have learned so far before starting your analysis.\n\n# Text analysis\n\nNow that we know that there are no rows with missing data, and no rows with the same vase number, we can start looking at the data in more detail. We are interested in the decorations on the vases, so we will look at the Decoration column.\n\n```{r decoration, results=FALSE}\ndata_short |> \n  select(Decoration)\n```\n\nAn interesting question could be which words appear most frequently in the Decoration column, as these would indicate the most common decorative elements. This insight would help us infer what was significant to the ancient civilization that crafted the vases, offering a glimpse into their society.\n\nWe can do this using the `unnest_tokens()` function. This function takes a column of text data, and splits it into individual words. It then returns a tibble with the words split up into individual rows. The first argument of the `unnest_tokens()` function is the name of the new column, which we will name \"word\". The second argument is the column with text data that will be split up into words.\n\nThe `unnest_tokens()` function is a part of the `tidytext` package, which we must download and load before we can use the function.\n\n```{r tidytext, eval=FALSE}\ninstall.packages(\"tidytext\")\n```\n\n```{r tidytext2, results=FALSE, warning=FALSE}\nlibrary(tidytext)\n```\n\n```{r unnest_tokens, results=FALSE}\ndata_words <- data_short |> \n  unnest_tokens(word, Decoration)\n```\n\nLets take a look at the most common words.\n\n```{r most common words, results=FALSE}\ndata_words |> \n  count(word) |> \n  arrange(desc(n))\n```\n\nWe can already see that there are some `NA` values. We can remove these easily using the `is.na()` and `filter()` functions and the \"not\" operator `!`.\n\n```{r drop_na, results=FALSE}\ndata_words |> \n  filter(!is.na(word)) |> \n  count(word) |> \n  arrange(desc(n))\n```\n\nThere are still some words that are not interesting for our analysis. These are called stop words. `tidytext` has a data set installed that lists a lot of common stop words which we can use to get rid of the unimportant words.\n\nLets have a look at the stop words.\n\n```{r stop_words, eval=FALSE}\nstop_words |> \n  View()\n```\n\nAlternatively we could also define our own custom stop words.\n\n```{r custom_stop_words, results=FALSE}\ncustom_stop_words <- c(\"a\", \"and\", \"with\", \"an\", \"or\", \"the\", \"of\", \"to\", \"in\", \"for\", \"on\", \"at\", \"from\", \"by\", \"about\", \"as\", \"into\", \"like\", \"through\", \"after\", \"over\", \"between\", \"out\", \"against\", \"during\", \"without\", \"before\", \"under\", \"around\", \"among\")\n```\n\nIn the following we will use our own tibble with stop words, because it is more sensitive to words that may be interesting to us but usually are not.\n\nWe will also make use of the matching operator `%in%`, which is used to check if elements of one vector are present in another vector. Following this logic, we can combine it with the not operator `!` and the `filter()` function to include only those rows from the word column which are not present in the stop_words vector.\n\n```{r anti_join, results=FALSE}\nword_counts <- data_words |>\n  filter(!is.na(word)) |>\n  filter(!word %in% custom_stop_words) |>\n  count(word) |>\n  arrange(desc(n))\n```\n\nLooking at our data set we can see that we still have the letter \"b\". We may decide to remove all words that are only one letter long. We can do this using the `filter()` function.\n\nThe `str_length()` function returns the number of characters in a string. We can use this to filter the data.\n\n```{r nchar, results=FALSE}\nword_counts <- data_words |>\n  filter(!is.na(word)) |>\n  filter(!word %in% custom_stop_words) |>\n  count(word) |>\n  arrange(desc(n)) |> \n  filter(str_length(word) > 1)\n```\n\nThere are still a lot of words in here. We decide to only look at the top 20 words. We can do this using the `top_n()` function.\n\n```{r top 20, results=FALSE}\nword_counts_top_20 <- word_counts |> \n  top_n(20, n)\n```\n\nWe can then create a plot of these words.\n\n```{r plot, results=FALSE}\nggplot(word_counts_top_20, aes(x = reorder(word, n), y = n)) +\n  geom_col() +\n  coord_flip() +\n  xlab(\"Word\") +\n  ylab(\"Number of occurrences\") +\n  ggtitle(\"Most common words in the Decoration column\") +\n  theme_bw()\n```\n\nThe prominence of mythological and religious imagery (Dionysos, maenads, satyrs) aligns with the cultural and religious significance of religion, particularly the cult of Dionysus in ancient Greece Additionally, the frequent mention of youths and warriors suggests a focus on themes of heroism, mythology, and possibly Athenian social ideals. Overall, the dominance of body and draped figures highlights the stylistic focus on human representation in this vase art.\n\n# The `separate()` function\n\nFor the homework, the `separate()` function is essential. This function takes a tibble, a column name, a new column name and a separator. It then splits the column into two (or more) columns, and returns a tibble with the new columns. Here we give an example of how to use this function.\n\nIf we take a look at the decoration column, we can see that some vases have an entry that is one word, then a colon and then more words. Imagine we want to isolate the first word and the words after the colon. We can do this using the `separate()` function, and by setting the separator to `:`.\n\n```{r separate_1, results=FALSE, warning=FALSE}\ndata_separated_decoration <- data_short |> \n  separate(Decoration, c(\"Decoration_1\", \"Decoration_2\"), sep = \":\")\n```\n\n# Fuzzy dates\n\nUsually data for origins of artefacts are given in ranges (e.g. 450-375 BC), since we cannot exactly date an archaeological artifact. Sadly, computers do not really like this type of \"fuzzy\" or uncertain time.\n\nThere are two ways to deal with this type of data.\n\nThe first is quite simple and implies taking the mean of these two values. However, this can lead to big errors if you do not understand the limitations to this approach, like picking a single mean year for a long time frame or loosing the given uncertainty of our dates by replacing them with an artificial \"specific\" date.\n\nLet's look at the underlying technique used for pottery, that is, the colors of the decorations on the pottery. Then we can ask, how does the technique change over time?\n\nWe can separate the dates into two columns, and then take the mean of the two columns. We can do this using the `separate()` function.\n\n```{r separate_2, results=FALSE}\ndata_short_dates <- data_short |> \n  separate(Date, c(\"Date_start\", \"Date_end\"), sep = \" to \")\n```\n\nThese columns are now character columns. We can convert them to numeric columns using the `parse_number()` function. We can then calculate the mean for each row.\n\n```{r mean, results=FALSE}\ndata_short_dates <- data_short_dates |> \n  mutate(Date_start = parse_number(Date_start), \n         Date_end = parse_number(Date_end),\n         Date_mean = (Date_start + Date_end) / 2)\n```\n\nWe only keep the rows with a black figure or red figure technique, as this allows for easier comparison with the plot we will make later.\n\n```{r black figure, results=FALSE}\ndata_plotting <- data_short_dates |> \n  filter(Technique == \"BLACK-FIGURE\" | Technique == \"RED-FIGURE\")\n```\n\nWe can then create a plot of the technique over time. We use the `fill` aesthetic to fill the color of the bars according to the color of the figures.\n\nWe will also use the argument `binwidth`, which defines how wide the columns appear. In this case, each bar aggregates a period of 25 years. The argument `position` is set to `dodge` so that the two types of figures we have are not printed on top of each other.\n\n```{r plot_1, results=FALSE}\nggplot(data_plotting, aes(x = Date_mean, fill = Technique)) +\n  geom_histogram(binwidth = 25, position = \"dodge\")\n```\n\nOur plot shows us that black figures were very popular around in 500 BCE, becoming more regular in the century preceding it, but then getting almost completely replaced by red figures which were very popular around 400 BCE. We can also see that the total number of vases declined after 500 BCE. The shift from Black-Figure to Red-Figure aligns with artistic and technological advancements in Athens, particularly during the Late Archaic and Classical periods. Red-Figure allowed for greater detail and naturalistic depictions, leading to its dominance in the Classical period.\n\nThis is one way to deal with the dates, which gives us some insights. However, we can also keep them fuzzy, which, in some scenarios, is the more accurate approach. For this we use the `datplot` package.\n\n```{r install, eval=FALSE}\ninstall.packages(\"datplot\")\n```\n\n```{r datplot, results=FALSE}\nlibrary(datplot)\n```\n\nIn this package, there is already a Beazley dataset, which we will use from now on. We can load this dataset using the `data()` function.\n\n```{r data, results=FALSE}\ndata(Beazley)\n```\n\nFor the type of plot we want to make, we need to have the data in a specific format, namely ID, Factor, date_min, date_max. The `datplot` dataset is already in this format. If this would not be the case, you would first need to bring the data set into this format.\n\nThe following code creates a copy of every year it could possibly be, given the range of dates. We can define the step size, which is the number of years between each copy.\n\n```{r copy, results=FALSE}\nresult <- datsteps(Beazley, stepsize = 1)\n```\n\nIt also calculates a weight for each date. This is the inverse of the number of copies, which means that if there are more copies of a date, the weight will be lower. By doing this, we account for the uncertainties of our dates more accurately then simply taking the mean.\n\nWe can use this data to plot the technique over time. Note that we define the weight as the `weight` aesthetic. This means that the weight will be used to determine the height of our density curve created by `geom_density`. Also note than the `Technique` column is here called `variable`.\n\n```{r plot_2, results=FALSE}\nggplot(result, aes(x = DAT_step, fill = variable, weight = weight)) +\n  geom_density(alpha = 0.5) +\n  labs(x = \"Dating\", y = \"Density\") +\n  ggtitle(\"Technique over time\")\n\n```\n\nCompare this graph to our earlier plot, what differences and similarities can you find?\n\nWhich plot do you prefer?\n\n# Homework assignments\n\n## Assignment 1\n\na)  Create a plot of the most common descriptions of the vases (As we did in the tutorial) in a new dataset, but reuse the code we wrote in the lecture. Use [this dataset](https://www.carc.ox.ac.uk/XDB/ASP/searchOpen.asp?setResultCheckboxes=chkAlbum&chkAlbum=true&windowWidth=1535&windowHeight=689&search=%20%7BAND%7D%20%20%5BProvenance%5D%20GREECE%2C%20ATHENS%2C%20CERAMICUS#aHeader).\n\nb)  Only looking at the 20 most common words in the data set, what can you say about the culture and time in which the vases were created?\n\nc)  Compare the results to the results from the lecture. What do you notice?\n\nNote that you can also import the data as a `.csv` file from GitHub using this link:\n\n```{r, eval = FALSE}\n\"https://github.com/ucrdatacenter/projects/raw/main/AH-ANTQ103/2024h1/Beazley_Archive_2.csv\"\n```\n\n## Assignment 2\n\na)  Create a plot of the most common shapes of the pottery in a new dataset. Use the Beazley archive data you loaded in the previous exercise. We are looking just for the main shapes, so for example: \"CUP FRAGMENT\" and \"CUP\" should be counted as the same shape, namely \"CUP\". Show the top 10 most frequent shapes.\n\nHint: You will need to split a column and the separator you want to use is either a comma or a space. You can use this expression to do that `[, ]`.\n\nb)  Use the code you wrote for 1.1 to create a plot of the most common shapes of the pottery in the original dataset. Again, \"CUP FRAGMENT\" and \"CUP\" (and similar definitions) should be counted as the same shape. Adapting the code should be very straightforward.\n\nc)  Using your plot, try to explain why certain shapes are more common than others.\n\n## Assignment 3\n\na)  Create a plot of the technique over time using the first Beazly dataset, which includes the fuzzy dates.\n\nb)  Using the plot, compare the most common techniques over time with what you would have expected from learning about different techniques in class. Are there similarities or differences?\n\nHint: The dataset you use for the `datsteps` function needs to be in a specific format.\n\nYou can use this code to create a dataset you can use as a starting point.\n\n```{r assignment 3, results=FALSE}\ndata_short_dates <- data_short |> \n  separate(Date, c(\"Date_start\", \"Date_end\"), sep = \" to \")\n\ndata_short_dates <- data_short_dates |> \n  mutate(Date_start = parse_number(Date_start), \n         Date_end = parse_number(Date_end))\n```\n\nThe plot should look like this:\n\n```{r plot_3, results=FALSE, echo=FALSE, warning=FALSE, message=FALSE}\ndata_short_dates_format <- data_short_dates %>% \n  select(Vase_Number, Technique, Date_start, Date_end)\n\nresult <- datsteps(data_short_dates_format, stepsize = 1)\n\nggplot(result, aes(x = DAT_step, fill = variable, weight = weight)) +\n  geom_density(alpha = 0.5) +\n  labs(x = \"Dating\", y = \"Density\") +\n  ggtitle(\"Technique over time\")\n```\n\n## Assignment 4\n\nThis is an open assignment. Create a new, original plot that you think is interesting and report your findings. This could be a text analysis on a new Beazley dataset, comparing the results to what we found earlier, or you can perform another time analysis on the Beazley dataset. You can also use a different dataset and compare your findings. Lastly, if you can think of another interesting analysis using archaeological data, you can do that as well. Try making use of the unique tools that data science offers you to create a plot that lets you derive something about the culture or time period from which the pottery stems. While working on this assignment, please be aware that this is the file you will be asked to work with for the final report.\n\nSome ideas may include, but are not limited to:\n\n-   Comparing the provenances of vases from several large museums\n\n-   Look at the occurrences of mythological figures on vases\n\n-   Compare the shapes of vases for shapes that may be used in every day life\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, error=FALSE)\n```\n\n## Data\n\nIn this workshop, we will work with Beazley Archive data and focus more on text analysis and fuzzy dates. This workshop is based on work done by Kalle Valkeakari.\n\nAs always, we start by loading `tidyverse`.\n\n```{r packages, message=FALSE, warning=FALSE}\nlibrary(tidyverse)\nlibrary(rio)\n```\n\nWe then load the data. We use a new data set that comes from a link and in the form of a `.csv` file. This file type is a very common file type for data sets and we can load it in using the `import()` function from the `rio` package again.\n\n```{r load data, message=FALSE, warning=FALSE}\n\ndata <- import(\"https://github.com/ucrdatacenter/projects/raw/main/AH-ANTQ103/2024h1/Beazley_Archive.csv\")\n\n```\n\nWe start by looking at the data.\n\n```{r head, results=FALSE}\nView(data)\n```\n\nAfter looking at the data, we have decided that we want the first eight columns and the 10th and 11th column, so we select them using the `select()` function.\n\n```{r select_3, results=FALSE}\ndata_short <- data |> \n  select(URI, Vase_Number, Fabric, Technique, Sub_Technique, Shape_Name, Provenance, Date, Attributed_To, Decoration)\n```\n\nNote that we do not always have to write the names of the columns we want to select, we can also select the names of the columns we would like to exclude and the `-` sign.\n\n```{r select_2, results=FALSE}\ndata_short <- data |> \n  select(-Inscriptions, -Collection_Record, -Publication_Record, -Inscriptions_II, -Measurements, -Volume, -Weight, -Restorations, -Ornament, -Technical_Observations, -Image_Credits, -Pleiades_URI, -Latitude, -Longitude, -LIMC_ID, -LIMC_Web, -British_Museum_Link, -Ure_Museum_Link, -Bryn_Mawr_College_Link, -Nicholson_Collection_Link, -Notes)\n```\n\nAlthough this is obviously more tedious in this example, you will often be confronted with data sets where removing unwanted columns is quicker than listing what you would like to keep.\n\nWe might want to check if there are multiple entries for the same object. Luckily there is a Vase Number column, so we can check if there are multiple entries for the same vase number. We can do this using the `duplicated()` function. We can then use the `filter()` function to filter the data to only include the duplicated rows.\n\n```{r duplicated, results=FALSE}\ndata_short |> \n  filter(duplicated(Vase_Number))\n```\n\nGiven that the tibble that this returns is empty, we can conclude that there are no rows with the same vase number.\n\nWe can also check if there are any rows with missing data. We can do this using the `is.na()` function.\n\n```{r is.na, results=FALSE}\ndata_short |> \n  filter(is.na(Vase_Number))\n```\n\nGiven that the tibble that this returns is empty, we can conclude that there are no rows with a missing vase number.\n\nHowever, since archaeological data is usually very messy, it is typical to find columns with many missing values or entries which are duplicated for no apparent reason. It is therefore very important to check your data sets for such irregularities and to clean it to the best of your abilities using the functions you have learned so far before starting your analysis.\n\n# Text analysis\n\nNow that we know that there are no rows with missing data, and no rows with the same vase number, we can start looking at the data in more detail. We are interested in the decorations on the vases, so we will look at the Decoration column.\n\n```{r decoration, results=FALSE}\ndata_short |> \n  select(Decoration)\n```\n\nAn interesting question could be which words appear most frequently in the Decoration column, as these would indicate the most common decorative elements. This insight would help us infer what was significant to the ancient civilization that crafted the vases, offering a glimpse into their society.\n\nWe can do this using the `unnest_tokens()` function. This function takes a column of text data, and splits it into individual words. It then returns a tibble with the words split up into individual rows. The first argument of the `unnest_tokens()` function is the name of the new column, which we will name \"word\". The second argument is the column with text data that will be split up into words.\n\nThe `unnest_tokens()` function is a part of the `tidytext` package, which we must download and load before we can use the function.\n\n```{r tidytext, eval=FALSE}\ninstall.packages(\"tidytext\")\n```\n\n```{r tidytext2, results=FALSE, warning=FALSE}\nlibrary(tidytext)\n```\n\n```{r unnest_tokens, results=FALSE}\ndata_words <- data_short |> \n  unnest_tokens(word, Decoration)\n```\n\nLets take a look at the most common words.\n\n```{r most common words, results=FALSE}\ndata_words |> \n  count(word) |> \n  arrange(desc(n))\n```\n\nWe can already see that there are some `NA` values. We can remove these easily using the `is.na()` and `filter()` functions and the \"not\" operator `!`.\n\n```{r drop_na, results=FALSE}\ndata_words |> \n  filter(!is.na(word)) |> \n  count(word) |> \n  arrange(desc(n))\n```\n\nThere are still some words that are not interesting for our analysis. These are called stop words. `tidytext` has a data set installed that lists a lot of common stop words which we can use to get rid of the unimportant words.\n\nLets have a look at the stop words.\n\n```{r stop_words, eval=FALSE}\nstop_words |> \n  View()\n```\n\nAlternatively we could also define our own custom stop words.\n\n```{r custom_stop_words, results=FALSE}\ncustom_stop_words <- c(\"a\", \"and\", \"with\", \"an\", \"or\", \"the\", \"of\", \"to\", \"in\", \"for\", \"on\", \"at\", \"from\", \"by\", \"about\", \"as\", \"into\", \"like\", \"through\", \"after\", \"over\", \"between\", \"out\", \"against\", \"during\", \"without\", \"before\", \"under\", \"around\", \"among\")\n```\n\nIn the following we will use our own tibble with stop words, because it is more sensitive to words that may be interesting to us but usually are not.\n\nWe will also make use of the matching operator `%in%`, which is used to check if elements of one vector are present in another vector. Following this logic, we can combine it with the not operator `!` and the `filter()` function to include only those rows from the word column which are not present in the stop_words vector.\n\n```{r anti_join, results=FALSE}\nword_counts <- data_words |>\n  filter(!is.na(word)) |>\n  filter(!word %in% custom_stop_words) |>\n  count(word) |>\n  arrange(desc(n))\n```\n\nLooking at our data set we can see that we still have the letter \"b\". We may decide to remove all words that are only one letter long. We can do this using the `filter()` function.\n\nThe `str_length()` function returns the number of characters in a string. We can use this to filter the data.\n\n```{r nchar, results=FALSE}\nword_counts <- data_words |>\n  filter(!is.na(word)) |>\n  filter(!word %in% custom_stop_words) |>\n  count(word) |>\n  arrange(desc(n)) |> \n  filter(str_length(word) > 1)\n```\n\nThere are still a lot of words in here. We decide to only look at the top 20 words. We can do this using the `top_n()` function.\n\n```{r top 20, results=FALSE}\nword_counts_top_20 <- word_counts |> \n  top_n(20, n)\n```\n\nWe can then create a plot of these words.\n\n```{r plot, results=FALSE}\nggplot(word_counts_top_20, aes(x = reorder(word, n), y = n)) +\n  geom_col() +\n  coord_flip() +\n  xlab(\"Word\") +\n  ylab(\"Number of occurrences\") +\n  ggtitle(\"Most common words in the Decoration column\") +\n  theme_bw()\n```\n\nThe prominence of mythological and religious imagery (Dionysos, maenads, satyrs) aligns with the cultural and religious significance of religion, particularly the cult of Dionysus in ancient Greece Additionally, the frequent mention of youths and warriors suggests a focus on themes of heroism, mythology, and possibly Athenian social ideals. Overall, the dominance of body and draped figures highlights the stylistic focus on human representation in this vase art.\n\n# The `separate()` function\n\nFor the homework, the `separate()` function is essential. This function takes a tibble, a column name, a new column name and a separator. It then splits the column into two (or more) columns, and returns a tibble with the new columns. Here we give an example of how to use this function.\n\nIf we take a look at the decoration column, we can see that some vases have an entry that is one word, then a colon and then more words. Imagine we want to isolate the first word and the words after the colon. We can do this using the `separate()` function, and by setting the separator to `:`.\n\n```{r separate_1, results=FALSE, warning=FALSE}\ndata_separated_decoration <- data_short |> \n  separate(Decoration, c(\"Decoration_1\", \"Decoration_2\"), sep = \":\")\n```\n\n# Fuzzy dates\n\nUsually data for origins of artefacts are given in ranges (e.g. 450-375 BC), since we cannot exactly date an archaeological artifact. Sadly, computers do not really like this type of \"fuzzy\" or uncertain time.\n\nThere are two ways to deal with this type of data.\n\nThe first is quite simple and implies taking the mean of these two values. However, this can lead to big errors if you do not understand the limitations to this approach, like picking a single mean year for a long time frame or loosing the given uncertainty of our dates by replacing them with an artificial \"specific\" date.\n\nLet's look at the underlying technique used for pottery, that is, the colors of the decorations on the pottery. Then we can ask, how does the technique change over time?\n\nWe can separate the dates into two columns, and then take the mean of the two columns. We can do this using the `separate()` function.\n\n```{r separate_2, results=FALSE}\ndata_short_dates <- data_short |> \n  separate(Date, c(\"Date_start\", \"Date_end\"), sep = \" to \")\n```\n\nThese columns are now character columns. We can convert them to numeric columns using the `parse_number()` function. We can then calculate the mean for each row.\n\n```{r mean, results=FALSE}\ndata_short_dates <- data_short_dates |> \n  mutate(Date_start = parse_number(Date_start), \n         Date_end = parse_number(Date_end),\n         Date_mean = (Date_start + Date_end) / 2)\n```\n\nWe only keep the rows with a black figure or red figure technique, as this allows for easier comparison with the plot we will make later.\n\n```{r black figure, results=FALSE}\ndata_plotting <- data_short_dates |> \n  filter(Technique == \"BLACK-FIGURE\" | Technique == \"RED-FIGURE\")\n```\n\nWe can then create a plot of the technique over time. We use the `fill` aesthetic to fill the color of the bars according to the color of the figures.\n\nWe will also use the argument `binwidth`, which defines how wide the columns appear. In this case, each bar aggregates a period of 25 years. The argument `position` is set to `dodge` so that the two types of figures we have are not printed on top of each other.\n\n```{r plot_1, results=FALSE}\nggplot(data_plotting, aes(x = Date_mean, fill = Technique)) +\n  geom_histogram(binwidth = 25, position = \"dodge\")\n```\n\nOur plot shows us that black figures were very popular around in 500 BCE, becoming more regular in the century preceding it, but then getting almost completely replaced by red figures which were very popular around 400 BCE. We can also see that the total number of vases declined after 500 BCE. The shift from Black-Figure to Red-Figure aligns with artistic and technological advancements in Athens, particularly during the Late Archaic and Classical periods. Red-Figure allowed for greater detail and naturalistic depictions, leading to its dominance in the Classical period.\n\nThis is one way to deal with the dates, which gives us some insights. However, we can also keep them fuzzy, which, in some scenarios, is the more accurate approach. For this we use the `datplot` package.\n\n```{r install, eval=FALSE}\ninstall.packages(\"datplot\")\n```\n\n```{r datplot, results=FALSE}\nlibrary(datplot)\n```\n\nIn this package, there is already a Beazley dataset, which we will use from now on. We can load this dataset using the `data()` function.\n\n```{r data, results=FALSE}\ndata(Beazley)\n```\n\nFor the type of plot we want to make, we need to have the data in a specific format, namely ID, Factor, date_min, date_max. The `datplot` dataset is already in this format. If this would not be the case, you would first need to bring the data set into this format.\n\nThe following code creates a copy of every year it could possibly be, given the range of dates. We can define the step size, which is the number of years between each copy.\n\n```{r copy, results=FALSE}\nresult <- datsteps(Beazley, stepsize = 1)\n```\n\nIt also calculates a weight for each date. This is the inverse of the number of copies, which means that if there are more copies of a date, the weight will be lower. By doing this, we account for the uncertainties of our dates more accurately then simply taking the mean.\n\nWe can use this data to plot the technique over time. Note that we define the weight as the `weight` aesthetic. This means that the weight will be used to determine the height of our density curve created by `geom_density`. Also note than the `Technique` column is here called `variable`.\n\n```{r plot_2, results=FALSE}\nggplot(result, aes(x = DAT_step, fill = variable, weight = weight)) +\n  geom_density(alpha = 0.5) +\n  labs(x = \"Dating\", y = \"Density\") +\n  ggtitle(\"Technique over time\")\n\n```\n\nCompare this graph to our earlier plot, what differences and similarities can you find?\n\nWhich plot do you prefer?\n\n# Homework assignments\n\n## Assignment 1\n\na)  Create a plot of the most common descriptions of the vases (As we did in the tutorial) in a new dataset, but reuse the code we wrote in the lecture. Use [this dataset](https://www.carc.ox.ac.uk/XDB/ASP/searchOpen.asp?setResultCheckboxes=chkAlbum&chkAlbum=true&windowWidth=1535&windowHeight=689&search=%20%7BAND%7D%20%20%5BProvenance%5D%20GREECE%2C%20ATHENS%2C%20CERAMICUS#aHeader).\n\nb)  Only looking at the 20 most common words in the data set, what can you say about the culture and time in which the vases were created?\n\nc)  Compare the results to the results from the lecture. What do you notice?\n\nNote that you can also import the data as a `.csv` file from GitHub using this link:\n\n```{r, eval = FALSE}\n\"https://github.com/ucrdatacenter/projects/raw/main/AH-ANTQ103/2024h1/Beazley_Archive_2.csv\"\n```\n\n## Assignment 2\n\na)  Create a plot of the most common shapes of the pottery in a new dataset. Use the Beazley archive data you loaded in the previous exercise. We are looking just for the main shapes, so for example: \"CUP FRAGMENT\" and \"CUP\" should be counted as the same shape, namely \"CUP\". Show the top 10 most frequent shapes.\n\nHint: You will need to split a column and the separator you want to use is either a comma or a space. You can use this expression to do that `[, ]`.\n\nb)  Use the code you wrote for 1.1 to create a plot of the most common shapes of the pottery in the original dataset. Again, \"CUP FRAGMENT\" and \"CUP\" (and similar definitions) should be counted as the same shape. Adapting the code should be very straightforward.\n\nc)  Using your plot, try to explain why certain shapes are more common than others.\n\n## Assignment 3\n\na)  Create a plot of the technique over time using the first Beazly dataset, which includes the fuzzy dates.\n\nb)  Using the plot, compare the most common techniques over time with what you would have expected from learning about different techniques in class. Are there similarities or differences?\n\nHint: The dataset you use for the `datsteps` function needs to be in a specific format.\n\nYou can use this code to create a dataset you can use as a starting point.\n\n```{r assignment 3, results=FALSE}\ndata_short_dates <- data_short |> \n  separate(Date, c(\"Date_start\", \"Date_end\"), sep = \" to \")\n\ndata_short_dates <- data_short_dates |> \n  mutate(Date_start = parse_number(Date_start), \n         Date_end = parse_number(Date_end))\n```\n\nThe plot should look like this:\n\n```{r plot_3, results=FALSE, echo=FALSE, warning=FALSE, message=FALSE}\ndata_short_dates_format <- data_short_dates %>% \n  select(Vase_Number, Technique, Date_start, Date_end)\n\nresult <- datsteps(data_short_dates_format, stepsize = 1)\n\nggplot(result, aes(x = DAT_step, fill = variable, weight = weight)) +\n  geom_density(alpha = 0.5) +\n  labs(x = \"Dating\", y = \"Density\") +\n  ggtitle(\"Technique over time\")\n```\n\n## Assignment 4\n\nThis is an open assignment. Create a new, original plot that you think is interesting and report your findings. This could be a text analysis on a new Beazley dataset, comparing the results to what we found earlier, or you can perform another time analysis on the Beazley dataset. You can also use a different dataset and compare your findings. Lastly, if you can think of another interesting analysis using archaeological data, you can do that as well. Try making use of the unique tools that data science offers you to create a plot that lets you derive something about the culture or time period from which the pottery stems. While working on this assignment, please be aware that this is the file you will be asked to work with for the final report.\n\nSome ideas may include, but are not limited to:\n\n-   Comparing the provenances of vases from several large museums\n\n-   Look at the occurrences of mythological figures on vases\n\n-   Compare the shapes of vases for shapes that may be used in every day life\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"workshop3.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","editor":"visual","theme":"simplex","mainfont":"Cormorant SC","fontsize":"20px","layout":"page","title":"AH-ANTQ103: Workshop 3","subtitle":"Spring 2025","date":"Last updated: `r Sys.Date()`"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}