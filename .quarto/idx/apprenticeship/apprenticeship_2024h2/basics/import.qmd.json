{"title":"Data Center Apprenticeship:\nR basics: Finding and importing data","markdown":{"yaml":{"title":"Data Center Apprenticeship:\nR basics: Finding and importing data","subtitle":"June 2024","date":"Last updated: `r Sys.Date()`"},"headingText":"example export code","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, error = FALSE)\n```\n\nR can handle practically any type of data, from simple text files to files used by other (not necessarily open-source) software and complex databases. This gives users a lot of flexibility in terms of data sources and formats.\n\nIn addition to using your own data (e.g. as exported from a survey), the Data Center keeps a continuously updated list of useful datasets by discipline, accessible [here](../../../../tutorials/data).\n\nIn the following, we'll discuss how to import and export from and to various file formats, and discuss a number of available packages to do so.\n\nStart by reading the introduction to importing the most common file types (text files, Excel, SPSS, Stata) [here](../../../../tutorials/r_adv_import). It is good to be aware of the Import dataset button and use it when needed, but in the long run it is easier to be aware of the available import functions and use them directly. The rest of this section gives more information and examples of importing data from different file formats and different levels of tidiness.\n\nWe will use the following packages for importing different file formats:\n\n```{r}\nlibrary(tidyverse)\nlibrary(readxl) # for Excel\nlibrary(haven) # for SPSS, Stata, SAS\n```\n\nIn addition, the `rio` package provides a generic import function, however, it is simply a wrapper for many of the other import functions shown below. While it may be easier to use the same import function for many file formats, `rio` redirects you to the original functions if you look for the possible function arguments, therefore for debugging it is better practice to use the \"original\" functions. In some cases, `rio` can read URL file paths that `readr` and `readxl` can't.\n\nIn the following, we'll work with some example data of student characteristics and grades. First, download [this](https://github.com/ucrdatacenter/projects/tree/main/apprenticeship2/2024h2/data) zip-file from GitHub, and extract it into a data folder within your apprenticeship project directory. We now import each file, explaining the packages, functions, and function arguments used. These files are all different subsets of the same dataset on student characteristics and grades at a university ([original source](https://www.kaggle.com/datasets/jacksondivakarr/student-classification-dataset?resource=download)).\n\n`student1.csv` is a comma-separated text file. Opening it in a notepad or Excel shows that the column separators are commas (,). The `read_csv()` function from the previous workshop expects commas as a separator, while `read_csv2()` expects semicolons (common with e.g. Dutch language settings). Since CSV files are a form of delimited text files, we can also use the more versatile `read_delim()` function specifying the delimiter as the argument.\n\nIn the following, we use the `read_csv()` (and `read_delim()`) function to import the data, and assign the resulting object to an object called `student1` with the assignment operator `<-`. The `student1` object is now a tibble in the R environment: you can find the object in the Environment tab in RStudio, and view the data by clicking on the object name or running `View(student1)` in the Console.\n\n```{r}\nstudent1 <- read_csv(\"data/student1.csv\")\nstudent1 <- read_delim(\"data/student1.csv\", delim = \",\")\n```\n\nIn this case, we used `read_csv()` only specifying its one mandatory argument: the file path. When using `read_delim()`, we also specified an optional argument: we defined the delimiter as a comma, thereby overriding the default function behavior. To learn more about the mandatory and optional arguments of a function, and find out what the default behaviors are, you can use the `?` operator followed by the function name, e.g. `?read_delim` in the Console to open the help file of a function (or use the search bar of the Help tab).\n\n`student2.tab` is also a delimited text file. Opening it in a notepad shows that the delimiter is a tab. The notation for tab whitespace is `\\t`, which we can specify in the `delim` argument. Like the \".tab\" file extension, \".tsv\" is also a tab-separated text file, so the more specialized `read_tsv()` function also works.\n\nIf you load this data without optional arguments, you'll see that instead of the correct number of columns, we get a single column, with the variable name containing some metadata. To get the correct number of columns, we need to skip the first row of the data that contains this metadata, as the actual data starts from the second row. We can use the `skip` argument to skip the first row. If we use one of the relevant import functions, and assign the outcome to the `student2` object, we can see that the data is now correctly imported and shows up in the environment next to `student1` as another tibble.\n\n```{r}\nstudent2 <- read_delim(\"data/student2.tab\", delim = \"\\t\", skip = 1)\nstudent2 <- read_tsv(\"data/student2.tab\", skip = 1)\n```\n\n`student3.xlsx` is an Excel file. To import Excel file we need the `read_excel()` function from the `readxl` package (the `readxl` package is one of packages that is not a part of core `tidyverse` but uses the same principles). With the `read_excel()` function you can specify which sheet to use in addition to similar arguments as for delimited text files. Notice that by default R imports the \"Metadata\" sheet, so we can use the `sheet` argument to specify which sheet to import. In addition, the first two rows contain introductory text, not the data, so we can use the `skip` argument to skip those rows. You may also notice that previously the variable name for age was `Student_Age` and now it is `Student_age`. You can rename the variable either by giving a full list of column names in the import function, but often it is easier to use the `rename()` function after importing.\n\n```{r}\nstudent3 <- read_excel(\"data/student3.xlsx\", sheet = \"Data\")\n```\n\nThe `haven` package (also not core `tidyverse` but same principles) reads files in the data formats of SPSS (.sav) and Stata (.dta). It can also extract variable and value labels from these files; here we can use the `read_spss()` to import `student4.sav`.\n\n```{r}\nstudent4 <- read_spss(\"data/student4.sav\")\n```\n\nRDS is an R-specific file format that saves all attributes of the dataframe (e.g. grouping, factor levels). It is particularly useful for saving intermediate data files, e.g. saving the cleaned data before analysis to avoid needing to run the data cleaning script repeatedly. To import an RDS file such as `student5.rds`, use the `read_rds()` function.\n\n```{r}\nstudent5 <- read_rds(\"data/student5.rds\")\n```\n\nA few notes regarding importing and exporting data:\n\n-   Always make sure you know your current working directory and the relative path to your data directory. It is better to use relative rather than absolute file paths (i.e. `data/data.csv` instead of `C:/User/Project/data/data.csv`).\n-   Note that if you are using Windows, you may need to replace the backslashes (\\\\) in the file path with forward slashes (/) to avoid errors.\n-   You can import files directly from URLs, although you usually need the URL of a raw file. If a file downloads immediately instead of opening in a raw format, you can try to copy that download link by right-clicking and selecting \"Copy link address\"; the `import()` function from `rio` might be successful with those links.\n-   To export data from R, you can almost always use the `write_...()` function corresponding to the desired file format, e.g. `write_csv()`. For Excel files the preferred export function is `write_xlsx()`, and for SPSS's .sav files it is `write_sav()`.\n-   For other file formats, the generic `write()` function is useful; you can specify any file format, and if your input data is readable in the chosen format, the file will export properly.\n-   In all `write_()` functions you need to specify the data you'd like to save and the output file path (absolute or relative) including chosen file extension.\n\n```{r, eval=FALSE}\nwrite_csv(student1, \"data/new_data.csv\")\n```\n\n# Go to\n\n-   [Introduction to R](../intro)\n-   [Data cleaning with `dplyr`](../clean)\n-   [Summary statistics](../summary)\n-   [Data visualization with `ggplot2`](../ggplot)\n-   [Hypothesis testing / modelling](../tests)\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, error = FALSE)\n```\n\nR can handle practically any type of data, from simple text files to files used by other (not necessarily open-source) software and complex databases. This gives users a lot of flexibility in terms of data sources and formats.\n\nIn addition to using your own data (e.g. as exported from a survey), the Data Center keeps a continuously updated list of useful datasets by discipline, accessible [here](../../../../tutorials/data).\n\nIn the following, we'll discuss how to import and export from and to various file formats, and discuss a number of available packages to do so.\n\nStart by reading the introduction to importing the most common file types (text files, Excel, SPSS, Stata) [here](../../../../tutorials/r_adv_import). It is good to be aware of the Import dataset button and use it when needed, but in the long run it is easier to be aware of the available import functions and use them directly. The rest of this section gives more information and examples of importing data from different file formats and different levels of tidiness.\n\nWe will use the following packages for importing different file formats:\n\n```{r}\nlibrary(tidyverse)\nlibrary(readxl) # for Excel\nlibrary(haven) # for SPSS, Stata, SAS\n```\n\nIn addition, the `rio` package provides a generic import function, however, it is simply a wrapper for many of the other import functions shown below. While it may be easier to use the same import function for many file formats, `rio` redirects you to the original functions if you look for the possible function arguments, therefore for debugging it is better practice to use the \"original\" functions. In some cases, `rio` can read URL file paths that `readr` and `readxl` can't.\n\nIn the following, we'll work with some example data of student characteristics and grades. First, download [this](https://github.com/ucrdatacenter/projects/tree/main/apprenticeship2/2024h2/data) zip-file from GitHub, and extract it into a data folder within your apprenticeship project directory. We now import each file, explaining the packages, functions, and function arguments used. These files are all different subsets of the same dataset on student characteristics and grades at a university ([original source](https://www.kaggle.com/datasets/jacksondivakarr/student-classification-dataset?resource=download)).\n\n`student1.csv` is a comma-separated text file. Opening it in a notepad or Excel shows that the column separators are commas (,). The `read_csv()` function from the previous workshop expects commas as a separator, while `read_csv2()` expects semicolons (common with e.g. Dutch language settings). Since CSV files are a form of delimited text files, we can also use the more versatile `read_delim()` function specifying the delimiter as the argument.\n\nIn the following, we use the `read_csv()` (and `read_delim()`) function to import the data, and assign the resulting object to an object called `student1` with the assignment operator `<-`. The `student1` object is now a tibble in the R environment: you can find the object in the Environment tab in RStudio, and view the data by clicking on the object name or running `View(student1)` in the Console.\n\n```{r}\nstudent1 <- read_csv(\"data/student1.csv\")\nstudent1 <- read_delim(\"data/student1.csv\", delim = \",\")\n```\n\nIn this case, we used `read_csv()` only specifying its one mandatory argument: the file path. When using `read_delim()`, we also specified an optional argument: we defined the delimiter as a comma, thereby overriding the default function behavior. To learn more about the mandatory and optional arguments of a function, and find out what the default behaviors are, you can use the `?` operator followed by the function name, e.g. `?read_delim` in the Console to open the help file of a function (or use the search bar of the Help tab).\n\n`student2.tab` is also a delimited text file. Opening it in a notepad shows that the delimiter is a tab. The notation for tab whitespace is `\\t`, which we can specify in the `delim` argument. Like the \".tab\" file extension, \".tsv\" is also a tab-separated text file, so the more specialized `read_tsv()` function also works.\n\nIf you load this data without optional arguments, you'll see that instead of the correct number of columns, we get a single column, with the variable name containing some metadata. To get the correct number of columns, we need to skip the first row of the data that contains this metadata, as the actual data starts from the second row. We can use the `skip` argument to skip the first row. If we use one of the relevant import functions, and assign the outcome to the `student2` object, we can see that the data is now correctly imported and shows up in the environment next to `student1` as another tibble.\n\n```{r}\nstudent2 <- read_delim(\"data/student2.tab\", delim = \"\\t\", skip = 1)\nstudent2 <- read_tsv(\"data/student2.tab\", skip = 1)\n```\n\n`student3.xlsx` is an Excel file. To import Excel file we need the `read_excel()` function from the `readxl` package (the `readxl` package is one of packages that is not a part of core `tidyverse` but uses the same principles). With the `read_excel()` function you can specify which sheet to use in addition to similar arguments as for delimited text files. Notice that by default R imports the \"Metadata\" sheet, so we can use the `sheet` argument to specify which sheet to import. In addition, the first two rows contain introductory text, not the data, so we can use the `skip` argument to skip those rows. You may also notice that previously the variable name for age was `Student_Age` and now it is `Student_age`. You can rename the variable either by giving a full list of column names in the import function, but often it is easier to use the `rename()` function after importing.\n\n```{r}\nstudent3 <- read_excel(\"data/student3.xlsx\", sheet = \"Data\")\n```\n\nThe `haven` package (also not core `tidyverse` but same principles) reads files in the data formats of SPSS (.sav) and Stata (.dta). It can also extract variable and value labels from these files; here we can use the `read_spss()` to import `student4.sav`.\n\n```{r}\nstudent4 <- read_spss(\"data/student4.sav\")\n```\n\nRDS is an R-specific file format that saves all attributes of the dataframe (e.g. grouping, factor levels). It is particularly useful for saving intermediate data files, e.g. saving the cleaned data before analysis to avoid needing to run the data cleaning script repeatedly. To import an RDS file such as `student5.rds`, use the `read_rds()` function.\n\n```{r}\nstudent5 <- read_rds(\"data/student5.rds\")\n```\n\nA few notes regarding importing and exporting data:\n\n-   Always make sure you know your current working directory and the relative path to your data directory. It is better to use relative rather than absolute file paths (i.e. `data/data.csv` instead of `C:/User/Project/data/data.csv`).\n-   Note that if you are using Windows, you may need to replace the backslashes (\\\\) in the file path with forward slashes (/) to avoid errors.\n-   You can import files directly from URLs, although you usually need the URL of a raw file. If a file downloads immediately instead of opening in a raw format, you can try to copy that download link by right-clicking and selecting \"Copy link address\"; the `import()` function from `rio` might be successful with those links.\n-   To export data from R, you can almost always use the `write_...()` function corresponding to the desired file format, e.g. `write_csv()`. For Excel files the preferred export function is `write_xlsx()`, and for SPSS's .sav files it is `write_sav()`.\n-   For other file formats, the generic `write()` function is useful; you can specify any file format, and if your input data is readable in the chosen format, the file will export properly.\n-   In all `write_()` functions you need to specify the data you'd like to save and the output file path (absolute or relative) including chosen file extension.\n\n```{r, eval=FALSE}\n# example export code\nwrite_csv(student1, \"data/new_data.csv\")\n```\n\n# Go to\n\n-   [Introduction to R](../intro)\n-   [Data cleaning with `dplyr`](../clean)\n-   [Summary statistics](../summary)\n-   [Data visualization with `ggplot2`](../ggplot)\n-   [Hypothesis testing / modelling](../tests)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"output-file":"import.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","editor":"visual","theme":"simplex","mainfont":"Cormorant SC","fontsize":"20px","title":"Data Center Apprenticeship:\nR basics: Finding and importing data","subtitle":"June 2024","date":"Last updated: `r Sys.Date()`"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}