{"title":"Data Center Apprenticeship:\nIntroduction","markdown":{"yaml":{"title":"Data Center Apprenticeship:\nIntroduction","subtitle":"Spring 2024","date":"Last updated: `r Sys.Date()`"},"headingText":"Introduction to the Apprenticeship program","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, error = FALSE)\n```\n\n*Schedule:*\n\n-   \\~30 min intro to apprenticeship\n-   \\~30 min intro to R\n-   \\~1.5 hours data wrangling\n\n\n## Workshops\n\nDetailed information about the workshop schedule is available in the course outline on Moodle. Any updates to the timing or location will also be announced there. Unless specified otherwise, workshops take place between 9:00-14:00 in classroom A-24.\n\nFor apprentices, active workshop participation is mandatory. Therefore, please bring your fully charged laptop to all workshops.\n\nOther interested members of the UCR community may join in-person (please bring you laptop) or online. If interested, please enroll in the UCR Data Center Moodle course (enrollment key \"Data-Center-1\") to receive Teams links and schedule updates.\n\n## Projects\n\nYou should work on your projects in the afternoons, preferably in room A-24, where the Data Center will be regularly available for support. We also encourage collaboration between apprentices: while all apprentices need to produce individual work, feel free to discuss your progress with each other and ask for help. Note that you are not expected to finish your projects by 26 January, but you should have some progress and a plan on how you'll move forward. You will then have the rest of the semester to complete your project and submit your internship report (following the usual internship guidelines on the Intranet).\n\n## Presentation\n\nOn 26 January we will organize a session where all apprentices can showcase their work. You will have to prepare and briefly present a poster on your project; you will receive more detailed guidelines and expectations later. You do not need to have complete results, but you should demonstrate the progress and direction of your project.\n\n# Introduction to R\n\n## Installation and setup: prepare in advance\n\nBefore the first workshop, please make sure that you have access to R and RStudio on your laptop. If you need help with the installation, please follow [this tutorial](../../../tutorials/r_install).\n\nThe [R basics tutorial](../../../tutorials/r_basics) on the Data Center website explains the RStudio interface, and shows how to create a new project and how to install packages. Please make sure that you are familiar with these features before the workshop, and complete the following:\n\n-   create a new project for your apprenticeship work;\n-   install the `tidyverse` package.\n\n## Objects in R\n\nOne of the most basic types of objects in R is a vector. A vector is a collection of values of the same type, such as numbers, characters, or logicals (TRUE/FALSE). You can create a vector with the `c()` function, which stands for concatenate. If you assign a vector to an object with the assignment operator `<-`, your vector will be saved in your environment so you can work with it within your current R session. Some examples of creating vectors are:\n\n```{r}\nv1 <- c(\"A\", \"B\", \"C\")\nv2 <- 25\nv3 <- 1:10\n```\n\nTo subset or extract elements from a vector, you can use square brackets `[ ]` with an index. For example, `v1[1]` returns the first element of `v1`, `v3[2:5]` returns the 2nd to 5th elements of `v3`, and `v3[-c(2, 4, 6)]` returns all but the 2nd, 4th and 6th elements of `v3`.\n\n```{r}\nv1[1]\nv3[2:5]\nv3[-c(2, 4, 6)]\n```\n\nA dataframe (or tibble in `tidyverse`) is a special type of object that combines vectors into a rectangular table. Each column of a dataframe is a vector, and each row is an observation. usually you would load data from an external source, but you can create a dataframe with the `data.frame()` and a tibble with the `tibble()` function. You can also convert other data types such as matrices to tibbles with the `as_tibble()` function. Both functions take vectors as their arguments. Tibbles are preferred because they are more modern and have some convenient features that dataframes don't, but for the most part, differences are minor and for the most part it does not matter whether you work with tibbles or dataframes.\n\nA simple example of creating a tibble is (make sure to load `tidyverse first`):\n\n```{r}\nlibrary(tidyverse)\n\n# define vectors within the tibble() function\ntibble(\n  name = c(\"Alice\", \"Bob\", \"Chris\"),\n  height = c(165, 180, 175)\n)\n\n# define the vectors first, then combine them into a tibble\nname <- c(\"Alice\", \"Bob\", \"Chris\")\nheight <- c(165, 180, 175)\ntibble(name, height)\n```\n\n## Functions in R\n\nFunctions are reusable pieces of code that perform a specific task. They take arguments as inputs and return one or more pieces of output. You will mostly work with functions loaded from various packages or from the base R distribution, and in some cases you may write your own functions to avoid repetition or improve the readability of your code. We will cover writing your own functions later in the program.\n\nAs with vectors, the output of a function is saved to your environment only if you assign the result to an object. For example, `sum(x)` will display the sum of the elements of the vector `x`, but `sum <- sum(x)` will save this result to an object.\n\n```{r}\nx <- c(1, 5, 6, 2, 1, 8)\n\nsum(x)\nsum <- sum(x)\n```\n\nSome important functions on vectors are\n\n```{r}\nmean(x) # return the mean; add the argument na.rm = TRUE if missing values should be excluded\nlength(x) # give the length of the vector (number of elements)\nunique(x) # list the unique elements of the vector\n```\n\nTo learn more about a function and its arguments, you can use the ? operator or the help() function, for example by typing `?sum` (or equivalently, `?sum()`). It is good practice to request help files from your console and not you R script, since there is no need to save these queries for the future.\n\n# Data wrangling in R\n\n## Importing data\n\nIn the following we will be working with a dataset on animal species diversity and weights. You can load this data directly from [this link](https://raw.githubusercontent.com/ucrdatacenter/projects/main/apprenticeship/2024h1/1_intro/surveys.csv) by pasting the URL as the argument of the `read_csv()` function (make sure you loaded `tidyverse` in your current R session). Pay attention to the quotation marks around the URL so R treats the URL as a character string to parse, and not an object defined in the R environment.\n\n```{r}\nsurveys <- read_csv(\"https://raw.githubusercontent.com/ucrdatacenter/projects/main/apprenticeship/2024h1/1_intro/surveys.csv\")\n```\n\nAfter importing the data, the `surveys` object will show up in your Environment tab. If you click on the object name, the full dataset will be displayed in your data viewer. Looking at your console, you can see that clicking on the object name automatically runs the `View(surveys)` function. If you would like to get an overview of what variables are in your data, you can use the summary function that gives you information about each variable:\n\n```{r}\nsummary(surveys)\n```\n\n## Data wrangling\n\nTo learn the basics of data wrangling using the `tidyverse` (in particular, the `dplyer` package within tidyverse), we follow Section 4 of the Data Carpentry course \"Data Analysis and Visualization in R for Ecologists\". It uses the species data we imported in the previous section.\n\nThe tutorial covers\n\n-   how to select a subset of the variables in a dataframe;\n-   how to filter observations based on logical conditions (e.g. only keep observations from a particular area or removing missing values);\n-   how to create new variables or transform existing ones;\n-   how to analyze and summarize data within groups;\n-   how to convert data from wide to long format and vice versa;\n-   how to organize the data wrangling process into a tidy workflow using pipes (`%>%` or `|>`).\n\nPlease use [this link](https://datacarpentry.org/R-ecology-lesson/03-dplyr.html) to follow the relevant part of the tutorial.\n\nA few notes on the contents of the tutorial:\n\n-   The Data Carpentry workshop uses the pipe from the `magrittr` package (`%>%`). Now there is also an alternative, the base pipe (`|>`). For the most part, they are equivalent. In the workshops we will primarily use the base pipe. You can change your default pipe setting in RStudio -\\> Tools -\\> Global options -\\> Code -\\> Use native pipe operator.\n-   The tutorial shows you how to filter out missing variables by combining the `filter()` and `is.na()` functions. An alternative is to use the `drop_na()` function, especially if you would like to drop missing values from multiple or all variables. An example is below, showing how many observations remain in each case using the `nrow()` function. Note the character vector of variable names when using the `all_of()` selection helper function.\n\n```{r}\n# drop all observations where at least one variable is missing\nsurveys |> \n  drop_na() |> \n  nrow()\n\n# drop all observations where at least one of the listed variables is missing\nsurveys |> \n  drop_na(weight, hindfoot_length) |> \n  nrow()\n```\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, error = FALSE)\n```\n\n*Schedule:*\n\n-   \\~30 min intro to apprenticeship\n-   \\~30 min intro to R\n-   \\~1.5 hours data wrangling\n\n# Introduction to the Apprenticeship program\n\n## Workshops\n\nDetailed information about the workshop schedule is available in the course outline on Moodle. Any updates to the timing or location will also be announced there. Unless specified otherwise, workshops take place between 9:00-14:00 in classroom A-24.\n\nFor apprentices, active workshop participation is mandatory. Therefore, please bring your fully charged laptop to all workshops.\n\nOther interested members of the UCR community may join in-person (please bring you laptop) or online. If interested, please enroll in the UCR Data Center Moodle course (enrollment key \"Data-Center-1\") to receive Teams links and schedule updates.\n\n## Projects\n\nYou should work on your projects in the afternoons, preferably in room A-24, where the Data Center will be regularly available for support. We also encourage collaboration between apprentices: while all apprentices need to produce individual work, feel free to discuss your progress with each other and ask for help. Note that you are not expected to finish your projects by 26 January, but you should have some progress and a plan on how you'll move forward. You will then have the rest of the semester to complete your project and submit your internship report (following the usual internship guidelines on the Intranet).\n\n## Presentation\n\nOn 26 January we will organize a session where all apprentices can showcase their work. You will have to prepare and briefly present a poster on your project; you will receive more detailed guidelines and expectations later. You do not need to have complete results, but you should demonstrate the progress and direction of your project.\n\n# Introduction to R\n\n## Installation and setup: prepare in advance\n\nBefore the first workshop, please make sure that you have access to R and RStudio on your laptop. If you need help with the installation, please follow [this tutorial](../../../tutorials/r_install).\n\nThe [R basics tutorial](../../../tutorials/r_basics) on the Data Center website explains the RStudio interface, and shows how to create a new project and how to install packages. Please make sure that you are familiar with these features before the workshop, and complete the following:\n\n-   create a new project for your apprenticeship work;\n-   install the `tidyverse` package.\n\n## Objects in R\n\nOne of the most basic types of objects in R is a vector. A vector is a collection of values of the same type, such as numbers, characters, or logicals (TRUE/FALSE). You can create a vector with the `c()` function, which stands for concatenate. If you assign a vector to an object with the assignment operator `<-`, your vector will be saved in your environment so you can work with it within your current R session. Some examples of creating vectors are:\n\n```{r}\nv1 <- c(\"A\", \"B\", \"C\")\nv2 <- 25\nv3 <- 1:10\n```\n\nTo subset or extract elements from a vector, you can use square brackets `[ ]` with an index. For example, `v1[1]` returns the first element of `v1`, `v3[2:5]` returns the 2nd to 5th elements of `v3`, and `v3[-c(2, 4, 6)]` returns all but the 2nd, 4th and 6th elements of `v3`.\n\n```{r}\nv1[1]\nv3[2:5]\nv3[-c(2, 4, 6)]\n```\n\nA dataframe (or tibble in `tidyverse`) is a special type of object that combines vectors into a rectangular table. Each column of a dataframe is a vector, and each row is an observation. usually you would load data from an external source, but you can create a dataframe with the `data.frame()` and a tibble with the `tibble()` function. You can also convert other data types such as matrices to tibbles with the `as_tibble()` function. Both functions take vectors as their arguments. Tibbles are preferred because they are more modern and have some convenient features that dataframes don't, but for the most part, differences are minor and for the most part it does not matter whether you work with tibbles or dataframes.\n\nA simple example of creating a tibble is (make sure to load `tidyverse first`):\n\n```{r}\nlibrary(tidyverse)\n\n# define vectors within the tibble() function\ntibble(\n  name = c(\"Alice\", \"Bob\", \"Chris\"),\n  height = c(165, 180, 175)\n)\n\n# define the vectors first, then combine them into a tibble\nname <- c(\"Alice\", \"Bob\", \"Chris\")\nheight <- c(165, 180, 175)\ntibble(name, height)\n```\n\n## Functions in R\n\nFunctions are reusable pieces of code that perform a specific task. They take arguments as inputs and return one or more pieces of output. You will mostly work with functions loaded from various packages or from the base R distribution, and in some cases you may write your own functions to avoid repetition or improve the readability of your code. We will cover writing your own functions later in the program.\n\nAs with vectors, the output of a function is saved to your environment only if you assign the result to an object. For example, `sum(x)` will display the sum of the elements of the vector `x`, but `sum <- sum(x)` will save this result to an object.\n\n```{r}\nx <- c(1, 5, 6, 2, 1, 8)\n\nsum(x)\nsum <- sum(x)\n```\n\nSome important functions on vectors are\n\n```{r}\nmean(x) # return the mean; add the argument na.rm = TRUE if missing values should be excluded\nlength(x) # give the length of the vector (number of elements)\nunique(x) # list the unique elements of the vector\n```\n\nTo learn more about a function and its arguments, you can use the ? operator or the help() function, for example by typing `?sum` (or equivalently, `?sum()`). It is good practice to request help files from your console and not you R script, since there is no need to save these queries for the future.\n\n# Data wrangling in R\n\n## Importing data\n\nIn the following we will be working with a dataset on animal species diversity and weights. You can load this data directly from [this link](https://raw.githubusercontent.com/ucrdatacenter/projects/main/apprenticeship/2024h1/1_intro/surveys.csv) by pasting the URL as the argument of the `read_csv()` function (make sure you loaded `tidyverse` in your current R session). Pay attention to the quotation marks around the URL so R treats the URL as a character string to parse, and not an object defined in the R environment.\n\n```{r}\nsurveys <- read_csv(\"https://raw.githubusercontent.com/ucrdatacenter/projects/main/apprenticeship/2024h1/1_intro/surveys.csv\")\n```\n\nAfter importing the data, the `surveys` object will show up in your Environment tab. If you click on the object name, the full dataset will be displayed in your data viewer. Looking at your console, you can see that clicking on the object name automatically runs the `View(surveys)` function. If you would like to get an overview of what variables are in your data, you can use the summary function that gives you information about each variable:\n\n```{r}\nsummary(surveys)\n```\n\n## Data wrangling\n\nTo learn the basics of data wrangling using the `tidyverse` (in particular, the `dplyer` package within tidyverse), we follow Section 4 of the Data Carpentry course \"Data Analysis and Visualization in R for Ecologists\". It uses the species data we imported in the previous section.\n\nThe tutorial covers\n\n-   how to select a subset of the variables in a dataframe;\n-   how to filter observations based on logical conditions (e.g. only keep observations from a particular area or removing missing values);\n-   how to create new variables or transform existing ones;\n-   how to analyze and summarize data within groups;\n-   how to convert data from wide to long format and vice versa;\n-   how to organize the data wrangling process into a tidy workflow using pipes (`%>%` or `|>`).\n\nPlease use [this link](https://datacarpentry.org/R-ecology-lesson/03-dplyr.html) to follow the relevant part of the tutorial.\n\nA few notes on the contents of the tutorial:\n\n-   The Data Carpentry workshop uses the pipe from the `magrittr` package (`%>%`). Now there is also an alternative, the base pipe (`|>`). For the most part, they are equivalent. In the workshops we will primarily use the base pipe. You can change your default pipe setting in RStudio -\\> Tools -\\> Global options -\\> Code -\\> Use native pipe operator.\n-   The tutorial shows you how to filter out missing variables by combining the `filter()` and `is.na()` functions. An alternative is to use the `drop_na()` function, especially if you would like to drop missing values from multiple or all variables. An example is below, showing how many observations remain in each case using the `nrow()` function. Note the character vector of variable names when using the `all_of()` selection helper function.\n\n```{r}\n# drop all observations where at least one variable is missing\nsurveys |> \n  drop_na() |> \n  nrow()\n\n# drop all observations where at least one of the listed variables is missing\nsurveys |> \n  drop_na(weight, hindfoot_length) |> \n  nrow()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"intro.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.555","editor":"visual","theme":"simplex","mainfont":"Cormorant SC","fontsize":"20px","title":"Data Center Apprenticeship:\nIntroduction","subtitle":"Spring 2024","date":"Last updated: `r Sys.Date()`"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}